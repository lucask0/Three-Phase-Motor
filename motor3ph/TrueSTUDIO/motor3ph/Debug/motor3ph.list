
motor3ph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08003c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  7 .bss          0000016c  200001dc  200001dc  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000348  20000348  000201dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_line   00004e94  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000119eb  00000000  00000000  000250a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001fcb  00000000  00000000  00036a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009d0  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000968  00000000  00000000  00039428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000036de  00000000  00000000  00039d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003d46e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e34  00000000  00000000  0003d4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000683e  00000000  00000000  0003f320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003788 	.word	0x08003788

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08003788 	.word	0x08003788

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a42:	e003      	b.n	8000a4c <LoopCopyDataInit>

08000a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a4a:	3104      	adds	r1, #4

08000a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a54:	d3f6      	bcc.n	8000a44 <CopyDataInit>
  ldr  r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a58:	e002      	b.n	8000a60 <LoopFillZerobss>

08000a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a5c:	f842 3b04 	str.w	r3, [r2], #4

08000a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a64:	d3f9      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a66:	f000 fb39 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f002 f889 	bl	8002b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f000 f909 	bl	8000c84 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a78:	08003c9c 	.word	0x08003c9c
  ldr  r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a80:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000a84:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000a88:	20000348 	.word	0x20000348

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a90:	b530      	push	{r4, r5, lr}
 8000a92:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOB_CLK_ENABLE();
 8000a94:	2400      	movs	r4, #0
 8000a96:	9400      	str	r4, [sp, #0]
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x68>)
 8000a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9c:	f042 0202 	orr.w	r2, r2, #2
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aa4:	f002 0202 	and.w	r2, r2, #2
 8000aa8:	9200      	str	r2, [sp, #0]
 8000aaa:	9a00      	ldr	r2, [sp, #0]
  __GPIOE_CLK_ENABLE();
 8000aac:	9401      	str	r4, [sp, #4]
 8000aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ab0:	f042 0210 	orr.w	r2, r2, #16
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ab8:	f002 0210 	and.w	r2, r2, #16
 8000abc:	9201      	str	r2, [sp, #4]
 8000abe:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 8000ac0:	9402      	str	r4, [sp, #8]
 8000ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac4:	f042 0201 	orr.w	r2, r2, #1
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ad4:	4d09      	ldr	r5, [pc, #36]	; (8000afc <MX_GPIO_Init+0x6c>)
 8000ad6:	4622      	mov	r2, r4
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4628      	mov	r0, r5
 8000adc:	f000 fdfe 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000aea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	a903      	add	r1, sp, #12
 8000aee:	4628      	mov	r0, r5
 8000af0:	f000 fd08 	bl	8001504 <HAL_GPIO_Init>

}
 8000af4:	b009      	add	sp, #36	; 0x24
 8000af6:	bd30      	pop	{r4, r5, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <MX_TIM1_Init>:
{
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
  htim1.Instance = TIM1;
 8000b04:	4c28      	ldr	r4, [pc, #160]	; (8000ba8 <MX_TIM1_Init+0xa8>)
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <MX_TIM1_Init+0xac>)
 8000b08:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000b0e:	2660      	movs	r6, #96	; 0x60
 8000b10:	60a6      	str	r6, [r4, #8]
  htim1.Init.Period = 4096;
 8000b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b16:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	2500      	movs	r5, #0
 8000b1a:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 1;
 8000b1c:	6163      	str	r3, [r4, #20]
  HAL_TIM_PWM_Init(&htim1);
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f001 fab0 	bl	8002084 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	950e      	str	r5, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8000b28:	a90e      	add	r1, sp, #56	; 0x38
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f001 fbbe 	bl	80022ac <HAL_TIMEx_MasterConfigSynchronization>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b30:	9507      	str	r5, [sp, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b32:	9508      	str	r5, [sp, #32]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b34:	9509      	str	r5, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b36:	950a      	str	r5, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b38:	950b      	str	r5, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b40:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 8000b42:	a907      	add	r1, sp, #28
 8000b44:	4620      	mov	r0, r4
 8000b46:	f001 fbda 	bl	80022fe <HAL_TIMEx_ConfigBreakDeadTime>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4a:	9600      	str	r6, [sp, #0]
  sConfigOC.Pulse = 2048;
 8000b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b50:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b52:	9502      	str	r5, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b54:	9503      	str	r5, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b56:	9504      	str	r5, [sp, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b58:	9505      	str	r5, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5a:	9506      	str	r5, [sp, #24]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000b5c:	462a      	mov	r2, r5
 8000b5e:	4669      	mov	r1, sp
 8000b60:	4620      	mov	r0, r4
 8000b62:	f001 fae1 	bl	8002128 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8000b66:	2204      	movs	r2, #4
 8000b68:	4669      	mov	r1, sp
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f001 fadc 	bl	8002128 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000b70:	2208      	movs	r2, #8
 8000b72:	4669      	mov	r1, sp
 8000b74:	4620      	mov	r0, r4
 8000b76:	f001 fad7 	bl	8002128 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f001 fb51 	bl	8002224 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000b82:	2104      	movs	r1, #4
 8000b84:	4620      	mov	r0, r4
 8000b86:	f001 fb4d 	bl	8002224 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f001 fb49 	bl	8002224 <HAL_TIM_PWM_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	68d3      	ldr	r3, [r2, #12]
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	60d3      	str	r3, [r2, #12]
  HAL_TIM_MspPostInit(&htim1);
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f000 f8d9 	bl	8000d54 <HAL_TIM_MspPostInit>
}
 8000ba2:	b010      	add	sp, #64	; 0x40
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200002fc 	.word	0x200002fc
 8000bac:	40010000 	.word	0x40010000

08000bb0 <MX_USART1_UART_Init>:
{
 8000bb0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <MX_USART1_UART_Init+0x2c>)
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_USART1_UART_Init+0x30>)
 8000bb6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8000bb8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bbc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bcc:	6102      	str	r2, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bce:	220c      	movs	r2, #12
 8000bd0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	61c3      	str	r3, [r0, #28]
  HAL_UART_Init(&huart1);
 8000bd6:	f001 fdfb 	bl	80027d0 <HAL_UART_Init>
 8000bda:	bd08      	pop	{r3, pc}
 8000bdc:	200002b8 	.word	0x200002b8
 8000be0:	40011000 	.word	0x40011000

08000be4 <SystemClock_Config>:
{
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
  __PWR_CLK_ENABLE();
 8000be8:	2400      	movs	r4, #0
 8000bea:	9401      	str	r4, [sp, #4]
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <SystemClock_Config+0x94>)
 8000bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	9402      	str	r4, [sp, #8]
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <SystemClock_Config+0x98>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	2502      	movs	r5, #2
 8000c18:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c24:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c26:	2308      	movs	r3, #8
 8000c28:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c2a:	23a8      	movs	r3, #168	; 0xa8
 8000c2c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c30:	2604      	movs	r6, #4
 8000c32:	9613      	str	r6, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c34:	a808      	add	r0, sp, #32
 8000c36:	f000 fd57 	bl	80016e8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c46:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c48:	9307      	str	r3, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	a803      	add	r0, sp, #12
 8000c4e:	f000 feed 	bl	8001a2c <HAL_RCC_ClockConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c52:	f000 ffeb 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SystemClock_Config+0x9c>)
 8000c58:	fba3 3000 	umull	r3, r0, r3, r0
 8000c5c:	0980      	lsrs	r0, r0, #6
 8000c5e:	f000 faef 	bl	8001240 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c62:	4630      	mov	r0, r6
 8000c64:	f000 fb02 	bl	800126c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c68:	4622      	mov	r2, r4
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 faa8 	bl	80011c4 <HAL_NVIC_SetPriority>
}
 8000c74:	b014      	add	sp, #80	; 0x50
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	10624dd3 	.word	0x10624dd3

08000c84 <main>:
{
 8000c84:	b508      	push	{r3, lr}
  HAL_Init();
 8000c86:	f000 fa63 	bl	8001150 <HAL_Init>
  SystemClock_Config();
 8000c8a:	f7ff ffab 	bl	8000be4 <SystemClock_Config>
  MX_GPIO_Init();
 8000c8e:	f7ff feff 	bl	8000a90 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c92:	f7ff ff35 	bl	8000b00 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000c96:	f7ff ff8b 	bl	8000bb0 <MX_USART1_UART_Init>
	  HAL_UART_Receive(&huart1, &buffer_in[0], 2, 1000000);
 8000c9a:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <main+0x44>)
 8000c9c:	4d0b      	ldr	r5, [pc, #44]	; (8000ccc <main+0x48>)
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <main+0x4c>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4621      	mov	r1, r4
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f001 fe23 	bl	80028f0 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, buffer_out[0], 2, 1000);
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <main+0x50>)
 8000cb2:	7809      	ldrb	r1, [r1, #0]
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f001 fdba 	bl	800282e <HAL_UART_Transmit>
	  speed = atoi(&buffer_in[0]);
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f001 ff5c 	bl	8002b78 <atoi>
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <main+0x54>)
 8000cc2:	6018      	str	r0, [r3, #0]
 8000cc4:	e7e9      	b.n	8000c9a <main+0x16>
 8000cc6:	bf00      	nop
 8000cc8:	200002f8 	.word	0x200002f8
 8000ccc:	200002b8 	.word	0x200002b8
 8000cd0:	000f4240 	.word	0x000f4240
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	200001f8 	.word	0x200001f8

08000cdc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 fa5e 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 fa6a 	bl	80011c4 <HAL_NVIC_SetPriority>
 8000cf0:	bd08      	pop	{r3, pc}
	...

08000cf4 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8000cf4:	6802      	ldr	r2, [r0, #0]
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_TIM_PWM_MspInit+0x5c>)
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d000      	beq.n	8000cfe <HAL_TIM_PWM_MspInit+0xa>
 8000cfc:	4770      	bx	lr
{
 8000cfe:	b510      	push	{r4, lr}
 8000d00:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __TIM1_CLK_ENABLE();
 8000d02:	2400      	movs	r4, #0
 8000d04:	9401      	str	r4, [sp, #4]
 8000d06:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	645a      	str	r2, [r3, #68]	; 0x44
 8000d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000d1c:	4622      	mov	r2, r4
 8000d1e:	4621      	mov	r1, r4
 8000d20:	2018      	movs	r0, #24
 8000d22:	f000 fa4f 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000d26:	2018      	movs	r0, #24
 8000d28:	f000 fa7e 	bl	8001228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d2c:	4622      	mov	r2, r4
 8000d2e:	4621      	mov	r1, r4
 8000d30:	2019      	movs	r0, #25
 8000d32:	f000 fa47 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d36:	2019      	movs	r0, #25
 8000d38:	f000 fa76 	bl	8001228 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d3c:	4622      	mov	r2, r4
 8000d3e:	4621      	mov	r1, r4
 8000d40:	201b      	movs	r0, #27
 8000d42:	f000 fa3f 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d46:	201b      	movs	r0, #27
 8000d48:	f000 fa6e 	bl	8001228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd10      	pop	{r4, pc}
 8000d50:	40010000 	.word	0x40010000

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8000d54:	6802      	ldr	r2, [r0, #0]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_TIM_MspPostInit+0x30>)
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d000      	beq.n	8000d5e <HAL_TIM_MspPostInit+0xa>
 8000d5c:	4770      	bx	lr
{
 8000d5e:	b500      	push	{lr}
 8000d60:	b087      	sub	sp, #28
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000d62:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000d66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000d70:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d76:	a901      	add	r1, sp, #4
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <HAL_TIM_MspPostInit+0x34>)
 8000d7a:	f000 fbc3 	bl	8001504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d7e:	b007      	add	sp, #28
 8000d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8000d8c:	6802      	ldr	r2, [r0, #0]
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d000      	beq.n	8000d96 <HAL_UART_MspInit+0xa>
 8000d94:	4770      	bx	lr
{
 8000d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __USART1_CLK_ENABLE();
 8000d9e:	2500      	movs	r5, #0
 8000da0:	9500      	str	r5, [sp, #0]
 8000da2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000da8:	f042 0210 	orr.w	r2, r2, #16
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dbc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	a901      	add	r1, sp, #4
 8000dd0:	481c      	ldr	r0, [pc, #112]	; (8000e44 <HAL_UART_MspInit+0xb8>)
 8000dd2:	f000 fb97 	bl	8001504 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000dd6:	4e1c      	ldr	r6, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0xbc>)
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_UART_MspInit+0xc0>)
 8000dda:	6033      	str	r3, [r6, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ddc:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
 8000de0:	f8c6 8004 	str.w	r8, [r6, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de4:	60b5      	str	r5, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de6:	60f5      	str	r5, [r6, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000de8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8000dec:	6137      	str	r7, [r6, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dee:	6175      	str	r5, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df0:	61b5      	str	r5, [r6, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000df2:	61f5      	str	r5, [r6, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df4:	6235      	str	r5, [r6, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df6:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart1_rx);
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 fa6b 	bl	80012d4 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dfe:	6366      	str	r6, [r4, #52]	; 0x34
 8000e00:	63b4      	str	r4, [r6, #56]	; 0x38

    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e02:	4e13      	ldr	r6, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0xc4>)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_UART_MspInit+0xc8>)
 8000e06:	6033      	str	r3, [r6, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000e08:	f8c6 8004 	str.w	r8, [r6, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e0c:	2340      	movs	r3, #64	; 0x40
 8000e0e:	60b3      	str	r3, [r6, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e10:	60f5      	str	r5, [r6, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e12:	6137      	str	r7, [r6, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e14:	6175      	str	r5, [r6, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e16:	61b5      	str	r5, [r6, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e18:	61f5      	str	r5, [r6, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	6235      	str	r5, [r6, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart1_tx);
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f000 fa58 	bl	80012d4 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e24:	6326      	str	r6, [r4, #48]	; 0x30
 8000e26:	63b4      	str	r4, [r6, #56]	; 0x38

  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e28:	462a      	mov	r2, r5
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	2025      	movs	r0, #37	; 0x25
 8000e2e:	f000 f9c9 	bl	80011c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e32:	2025      	movs	r0, #37	; 0x25
 8000e34:	f000 f9f8 	bl	8001228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e38:	b006      	add	sp, #24
 8000e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e3e:	bf00      	nop
 8000e40:	40011000 	.word	0x40011000
 8000e44:	40020000 	.word	0x40020000
 8000e48:	20000260 	.word	0x20000260
 8000e4c:	40026440 	.word	0x40026440
 8000e50:	20000208 	.word	0x20000208
 8000e54:	400264b8 	.word	0x400264b8

08000e58 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f993 	bl	8001184 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000e5e:	f000 fa16 	bl	800128e <HAL_SYSTICK_IRQHandler>
 8000e62:	bd08      	pop	{r3, pc}

08000e64 <TIM1_BRK_TIM9_IRQHandler>:
extern volatile int speed;
/**
* @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
*/
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8000e68:	f000 ffc1 	bl	8001dee <HAL_TIM_IRQHandler>
 8000e6c:	bd08      	pop	{r3, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002fc 	.word	0x200002fc
 8000e74:	00000000 	.word	0x00000000

08000e78 <rampa>:

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

void rampa()
{
 8000e78:	b508      	push	{r3, lr}

	if (freq < set_point)
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <rampa+0x80>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <rampa+0x84>)
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	d50c      	bpl.n	8000eaa <rampa+0x32>
	{
		freq = freq + 0.01;
 8000e90:	ee17 0a90 	vmov	r0, s15
 8000e94:	f7ff fafc 	bl	8000490 <__aeabi_f2d>
 8000e98:	a315      	add	r3, pc, #84	; (adr r3, 8000ef0 <rampa+0x78>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff f999 	bl	80001d4 <__adddf3>
 8000ea2:	f7ff fd7b 	bl	800099c <__aeabi_d2f>
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <rampa+0x80>)
 8000ea8:	6018      	str	r0, [r3, #0]
	}
	if (freq > set_point)
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <rampa+0x80>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <rampa+0x84>)
 8000eb2:	ed93 7a00 	vldr	s14, [r3]
 8000eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	dd0c      	ble.n	8000eda <rampa+0x62>
	{
		freq = freq - 0.01;
 8000ec0:	ee17 0a90 	vmov	r0, s15
 8000ec4:	f7ff fae4 	bl	8000490 <__aeabi_f2d>
 8000ec8:	a309      	add	r3, pc, #36	; (adr r3, 8000ef0 <rampa+0x78>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff f97f 	bl	80001d0 <__aeabi_dsub>
 8000ed2:	f7ff fd63 	bl	800099c <__aeabi_d2f>
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <rampa+0x80>)
 8000ed8:	6018      	str	r0, [r3, #0]
	}

	amp_unit=freq/40.0;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <rampa+0x80>)
 8000edc:	edd3 6a00 	vldr	s13, [r3]
 8000ee0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f00 <rampa+0x88>
 8000ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <rampa+0x8c>)
 8000eea:	edc3 7a00 	vstr	s15, [r3]
 8000eee:	bd08      	pop	{r3, pc}
 8000ef0:	47ae147b 	.word	0x47ae147b
 8000ef4:	3f847ae1 	.word	0x3f847ae1
 8000ef8:	20000204 	.word	0x20000204
 8000efc:	20000004 	.word	0x20000004
 8000f00:	42200000 	.word	0x42200000
 8000f04:	200001fc 	.word	0x200001fc

08000f08 <TIM1_UP_TIM10_IRQHandler>:
{
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	ed2d 8b02 	vpush	{d8}
	TIM1->CCR1 = (uint32_t)((sin1*2048.0)+2048);
 8000f0e:	4b58      	ldr	r3, [pc, #352]	; (8001070 <TIM1_UP_TIM10_IRQHandler+0x168>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	f7ff fabd 	bl	8000490 <__aeabi_f2d>
 8000f16:	2200      	movs	r2, #0
 8000f18:	4b56      	ldr	r3, [pc, #344]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8000f1a:	f7ff fb0d 	bl	8000538 <__aeabi_dmul>
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b54      	ldr	r3, [pc, #336]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8000f22:	f7ff f957 	bl	80001d4 <__adddf3>
 8000f26:	f7ff fd19 	bl	800095c <__aeabi_d2uiz>
 8000f2a:	4c53      	ldr	r4, [pc, #332]	; (8001078 <TIM1_UP_TIM10_IRQHandler+0x170>)
 8000f2c:	6360      	str	r0, [r4, #52]	; 0x34
	TIM1->CCR2 = (uint32_t)((sin2*2048.0)+2048);
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <TIM1_UP_TIM10_IRQHandler+0x174>)
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f7ff faad 	bl	8000490 <__aeabi_f2d>
 8000f36:	2200      	movs	r2, #0
 8000f38:	4b4e      	ldr	r3, [pc, #312]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8000f3a:	f7ff fafd 	bl	8000538 <__aeabi_dmul>
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8000f42:	f7ff f947 	bl	80001d4 <__adddf3>
 8000f46:	f7ff fd09 	bl	800095c <__aeabi_d2uiz>
 8000f4a:	63a0      	str	r0, [r4, #56]	; 0x38
	TIM1->CCR3 = (uint32_t)((sin3*2048.0)+2048);
 8000f4c:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	f7ff fa9e 	bl	8000490 <__aeabi_f2d>
 8000f54:	2200      	movs	r2, #0
 8000f56:	4b47      	ldr	r3, [pc, #284]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8000f58:	f7ff faee 	bl	8000538 <__aeabi_dmul>
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4b45      	ldr	r3, [pc, #276]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8000f60:	f7ff f938 	bl	80001d4 <__adddf3>
 8000f64:	f7ff fcfa 	bl	800095c <__aeabi_d2uiz>
 8000f68:	63e0      	str	r0, [r4, #60]	; 0x3c
	  if (speed >=0)
 8000f6a:	4b46      	ldr	r3, [pc, #280]	; (8001084 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <TIM1_UP_TIM10_IRQHandler+0x82>
		  if (speed <=40)
 8000f72:	4b44      	ldr	r3, [pc, #272]	; (8001084 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b28      	cmp	r3, #40	; 0x28
 8000f78:	dc07      	bgt.n	8000f8a <TIM1_UP_TIM10_IRQHandler+0x82>
			  set_point=(float)speed;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000f86:	edc3 7a00 	vstr	s15, [r3]
	counter++;
 8000f8a:	4a40      	ldr	r2, [pc, #256]	; (800108c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	6013      	str	r3, [r2, #0]
	if (counter >= 5127)
 8000f92:	f241 4206 	movw	r2, #5126	; 0x1406
 8000f96:	4293      	cmp	r3, r2
 8000f98:	dd02      	ble.n	8000fa0 <TIM1_UP_TIM10_IRQHandler+0x98>
		counter=0;
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	; (800108c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000f9e:	601a      	str	r2, [r3, #0]
	rampa();
 8000fa0:	f7ff ff6a 	bl	8000e78 <rampa>
	sin1=amp_unit* sinf((float)counter/5127.0*6.2832*freq);
 8000fa4:	4b39      	ldr	r3, [pc, #228]	; (800108c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	ee07 0a90 	vmov	s15, r0
 8000fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb0:	ee17 0a90 	vmov	r0, s15
 8000fb4:	f7ff fa6c 	bl	8000490 <__aeabi_f2d>
 8000fb8:	a327      	add	r3, pc, #156	; (adr r3, 8001058 <TIM1_UP_TIM10_IRQHandler+0x150>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fbe5 	bl	800078c <__aeabi_ddiv>
 8000fc2:	a327      	add	r3, pc, #156	; (adr r3, 8001060 <TIM1_UP_TIM10_IRQHandler+0x158>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff fab6 	bl	8000538 <__aeabi_dmul>
 8000fcc:	4604      	mov	r4, r0
 8000fce:	460d      	mov	r5, r1
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f7ff fa5c 	bl	8000490 <__aeabi_f2d>
 8000fd8:	4622      	mov	r2, r4
 8000fda:	462b      	mov	r3, r5
 8000fdc:	f7ff faac 	bl	8000538 <__aeabi_dmul>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	f7ff fcda 	bl	800099c <__aeabi_d2f>
 8000fe8:	ee00 0a10 	vmov	s0, r0
 8000fec:	f001 fea4 	bl	8002d38 <sinf>
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8000ff2:	ed93 8a00 	vldr	s16, [r3]
 8000ff6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <TIM1_UP_TIM10_IRQHandler+0x168>)
 8000ffc:	ed83 0a00 	vstr	s0, [r3]
	sin2=amp_unit* sinf((float)counter/5127.0*6.2832*freq+2.0944);
 8001000:	a319      	add	r3, pc, #100	; (adr r3, 8001068 <TIM1_UP_TIM10_IRQHandler+0x160>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff f8e3 	bl	80001d4 <__adddf3>
 800100e:	f7ff fcc5 	bl	800099c <__aeabi_d2f>
 8001012:	ee00 0a10 	vmov	s0, r0
 8001016:	f001 fe8f 	bl	8002d38 <sinf>
 800101a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <TIM1_UP_TIM10_IRQHandler+0x174>)
 8001020:	ed83 0a00 	vstr	s0, [r3]
	sin3=amp_unit* sinf((float)counter/5127.0*6.2832*freq-2.0944);
 8001024:	a310      	add	r3, pc, #64	; (adr r3, 8001068 <TIM1_UP_TIM10_IRQHandler+0x160>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f8cf 	bl	80001d0 <__aeabi_dsub>
 8001032:	f7ff fcb3 	bl	800099c <__aeabi_d2f>
 8001036:	ee00 0a10 	vmov	s0, r0
 800103a:	f001 fe7d 	bl	8002d38 <sinf>
 800103e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8001044:	ed83 0a00 	vstr	s0, [r3]
  HAL_TIM_IRQHandler(&htim1);
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <TIM1_UP_TIM10_IRQHandler+0x190>)
 800104a:	f000 fed0 	bl	8001dee <HAL_TIM_IRQHandler>
}
 800104e:	ecbd 8b02 	vpop	{d8}
 8001052:	bd38      	pop	{r3, r4, r5, pc}
 8001054:	f3af 8000 	nop.w
 8001058:	00000000 	.word	0x00000000
 800105c:	40b40700 	.word	0x40b40700
 8001060:	2e48e8a7 	.word	0x2e48e8a7
 8001064:	401921ff 	.word	0x401921ff
 8001068:	c985f06f 	.word	0xc985f06f
 800106c:	4000c154 	.word	0x4000c154
 8001070:	20000340 	.word	0x20000340
 8001074:	40a00000 	.word	0x40a00000
 8001078:	40010000 	.word	0x40010000
 800107c:	2000033c 	.word	0x2000033c
 8001080:	20000338 	.word	0x20000338
 8001084:	200001f8 	.word	0x200001f8
 8001088:	20000004 	.word	0x20000004
 800108c:	20000200 	.word	0x20000200
 8001090:	20000204 	.word	0x20000204
 8001094:	200001fc 	.word	0x200001fc
 8001098:	200002fc 	.word	0x200002fc

0800109c <TIM1_CC_IRQHandler>:

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
 800109c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM1_CC_IRQHandler+0xc>)
 80010a0:	f000 fea5 	bl	8001dee <HAL_TIM_IRQHandler>
 80010a4:	bd08      	pop	{r3, pc}
 80010a6:	bf00      	nop
 80010a8:	200002fc 	.word	0x200002fc

080010ac <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80010ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010ae:	4802      	ldr	r0, [pc, #8]	; (80010b8 <USART1_IRQHandler+0xc>)
 80010b0:	f001 fcdf 	bl	8002a72 <HAL_UART_IRQHandler>
 80010b4:	bd08      	pop	{r3, pc}
 80010b6:	bf00      	nop
 80010b8:	200002b8 	.word	0x200002b8

080010bc <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream2 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 80010bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010be:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA2_Stream2_IRQHandler+0xc>)
 80010c0:	f000 f946 	bl	8001350 <HAL_DMA_IRQHandler>
 80010c4:	bd08      	pop	{r3, pc}
 80010c6:	bf00      	nop
 80010c8:	20000260 	.word	0x20000260

080010cc <DMA2_Stream7_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream7_IRQHandler(void)
{
 80010cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA2_Stream7_IRQHandler+0xc>)
 80010d0:	f000 f93e 	bl	8001350 <HAL_DMA_IRQHandler>
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop
 80010d8:	20000208 	.word	0x20000208

080010dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	490f      	ldr	r1, [pc, #60]	; (800111c <SystemInit+0x40>)
 80010de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <SystemInit+0x44>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f4:	2000      	movs	r0, #0
 80010f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001102:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SystemInit+0x48>)
 8001106:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800110e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001110:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001112:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001116:	608b      	str	r3, [r1, #8]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	40023800 	.word	0x40023800
 8001124:	24003010 	.word	0x24003010

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b510      	push	{r4, lr}
 800112a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800112c:	f000 fd7e 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_InitTick+0x24>)
 8001132:	fba3 3000 	umull	r3, r0, r3, r0
 8001136:	0980      	lsrs	r0, r0, #6
 8001138:	f000 f882 	bl	8001240 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800113c:	2200      	movs	r2, #0
 800113e:	4621      	mov	r1, r4
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f83e 	bl	80011c4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001148:	2000      	movs	r0, #0
 800114a:	bd10      	pop	{r4, pc}
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <HAL_Init>:
{
 8001150:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x30>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800115a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001162:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f817 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ffd8 	bl	8001128 <HAL_InitTick>
  HAL_MspInit();
 8001178:	f7ff fdb0 	bl	8000cdc <HAL_MspInit>
}
 800117c:	2000      	movs	r0, #0
 800117e:	bd08      	pop	{r3, pc}
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001184:	4a02      	ldr	r2, [pc, #8]	; (8001190 <HAL_IncTick+0xc>)
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000344 	.word	0x20000344

08001194 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001194:	4b01      	ldr	r3, [pc, #4]	; (800119c <HAL_GetTick+0x8>)
 8001196:	6818      	ldr	r0, [r3, #0]
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000344 	.word	0x20000344

080011a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011ac:	0200      	lsls	r0, r0, #8
 80011ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80011b4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80011b8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011bc:	60d0      	str	r0, [r2, #12]
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_NVIC_SetPriority+0x5c>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ce:	f1c3 0407 	rsb	r4, r3, #7
 80011d2:	2c04      	cmp	r4, #4
 80011d4:	bf28      	it	cs
 80011d6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d8:	1d1d      	adds	r5, r3, #4
 80011da:	2d06      	cmp	r5, #6
 80011dc:	d917      	bls.n	800120e <HAL_NVIC_SetPriority+0x4a>
 80011de:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	2501      	movs	r5, #1
 80011e2:	fa05 f404 	lsl.w	r4, r5, r4
 80011e6:	3c01      	subs	r4, #1
 80011e8:	4021      	ands	r1, r4
 80011ea:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	fa05 f303 	lsl.w	r3, r5, r3
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80011f6:	2800      	cmp	r0, #0
 80011f8:	db0b      	blt.n	8001212 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	0109      	lsls	r1, r1, #4
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001202:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001206:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800120a:	bc30      	pop	{r4, r5}
 800120c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	2300      	movs	r3, #0
 8001210:	e7e6      	b.n	80011e0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	f000 000f 	and.w	r0, r0, #15
 8001216:	0109      	lsls	r1, r1, #4
 8001218:	b2c9      	uxtb	r1, r1
 800121a:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_NVIC_SetPriority+0x60>)
 800121c:	5419      	strb	r1, [r3, r0]
 800121e:	e7f4      	b.n	800120a <HAL_NVIC_SetPriority+0x46>
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	e000ed14 	.word	0xe000ed14

08001228 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001228:	0942      	lsrs	r2, r0, #5
 800122a:	f000 001f 	and.w	r0, r0, #31
 800122e:	2301      	movs	r3, #1
 8001230:	fa03 f000 	lsl.w	r0, r3, r0
 8001234:	4b01      	ldr	r3, [pc, #4]	; (800123c <HAL_NVIC_EnableIRQ+0x14>)
 8001236:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100

08001240 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	3801      	subs	r0, #1
 8001242:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001246:	d20a      	bcs.n	800125e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_SYSTICK_Config+0x24>)
 800124a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	21f0      	movs	r1, #240	; 0xf0
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_SYSTICK_Config+0x28>)
 8001250:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	2000      	movs	r0, #0
 8001256:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800126c:	2804      	cmp	r0, #4
 800126e:	d005      	beq.n	800127c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	f023 0304 	bic.w	r3, r3, #4
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800127c:	4a02      	ldr	r2, [pc, #8]	; (8001288 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4770      	bx	lr
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800128c:	4770      	bx	lr

0800128e <HAL_SYSTICK_IRQHandler>:
{
 800128e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001290:	f7ff fffc 	bl	800128c <HAL_SYSTICK_Callback>
 8001294:	bd08      	pop	{r3, pc}
	...

08001298 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	b2d3      	uxtb	r3, r2
 800129c:	3b10      	subs	r3, #16
 800129e:	490b      	ldr	r1, [pc, #44]	; (80012cc <DMA_CalcBaseAndBitshift+0x34>)
 80012a0:	fba1 1303 	umull	r1, r3, r1, r3
 80012a4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012a6:	490a      	ldr	r1, [pc, #40]	; (80012d0 <DMA_CalcBaseAndBitshift+0x38>)
 80012a8:	5cc9      	ldrb	r1, [r1, r3]
 80012aa:	6541      	str	r1, [r0, #84]	; 0x54
  
  if (stream_number > 3U)
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d806      	bhi.n	80012be <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012b0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80012b4:	f022 0203 	bic.w	r2, r2, #3
 80012b8:	6502      	str	r2, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
 80012ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80012bc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012be:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80012c2:	f022 0203 	bic.w	r2, r2, #3
 80012c6:	3204      	adds	r2, #4
 80012c8:	6502      	str	r2, [r0, #80]	; 0x50
 80012ca:	e7f6      	b.n	80012ba <DMA_CalcBaseAndBitshift+0x22>
 80012cc:	aaaaaaab 	.word	0xaaaaaaab
 80012d0:	080037a0 	.word	0x080037a0

080012d4 <HAL_DMA_Init>:
  if(hdma == NULL)
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d037      	beq.n	8001348 <HAL_DMA_Init+0x74>
{
 80012d8:	b538      	push	{r3, r4, r5, lr}
 80012da:	4603      	mov	r3, r0
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80012dc:	6a41      	ldr	r1, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_BUSY;
 80012de:	2202      	movs	r2, #2
 80012e0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  tmp = hdma->Instance->CR;
 80012e4:	6804      	ldr	r4, [r0, #0]
 80012e6:	6822      	ldr	r2, [r4, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <HAL_DMA_Init+0x78>)
 80012ea:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	689d      	ldr	r5, [r3, #8]
 80012f0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f2:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f4:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	691d      	ldr	r5, [r3, #16]
 80012f8:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fa:	695d      	ldr	r5, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fc:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	699d      	ldr	r5, [r3, #24]
 8001300:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001306:	6a1d      	ldr	r5, [r3, #32]
 8001308:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130a:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800130c:	2904      	cmp	r1, #4
 800130e:	d013      	beq.n	8001338 <HAL_DMA_Init+0x64>
  hdma->Instance->CR = tmp;  
 8001310:	6022      	str	r2, [r4, #0]
  tmp = hdma->Instance->FCR;
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001316:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 800131a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800131c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131e:	2804      	cmp	r0, #4
 8001320:	d00f      	beq.n	8001342 <HAL_DMA_Init+0x6e>
 8001322:	461c      	mov	r4, r3
  hdma->Instance->FCR = tmp;
 8001324:	614a      	str	r2, [r1, #20]
  DMA_CalcBaseAndBitshift(hdma);
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffb6 	bl	8001298 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132c:	2000      	movs	r0, #0
 800132e:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdma->State = HAL_DMA_STATE_READY;
 8001330:	2301      	movs	r3, #1
 8001332:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001336:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800133c:	4301      	orrs	r1, r0
 800133e:	430a      	orrs	r2, r1
 8001340:	e7e6      	b.n	8001310 <HAL_DMA_Init+0x3c>
    tmp |= hdma->Init.FIFOThreshold;
 8001342:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001344:	4302      	orrs	r2, r0
 8001346:	e7ec      	b.n	8001322 <HAL_DMA_Init+0x4e>
    return HAL_ERROR;
 8001348:	2001      	movs	r0, #1
 800134a:	4770      	bx	lr
 800134c:	f010803f 	.word	0xf010803f

08001350 <HAL_DMA_IRQHandler>:
{
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4604      	mov	r4, r0
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001354:	6d05      	ldr	r5, [r0, #80]	; 0x50
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001356:	682a      	ldr	r2, [r5, #0]
 8001358:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800135a:	2308      	movs	r3, #8
 800135c:	408b      	lsls	r3, r1
 800135e:	421a      	tst	r2, r3
 8001360:	d019      	beq.n	8001396 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001362:	6803      	ldr	r3, [r0, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f012 0f04 	tst.w	r2, #4
 800136a:	d014      	beq.n	8001396 <HAL_DMA_IRQHandler+0x46>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001374:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001376:	2308      	movs	r3, #8
 8001378:	4093      	lsls	r3, r2
 800137a:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800137c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	64c3      	str	r3, [r0, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8001384:	2304      	movs	r3, #4
 8001386:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800138a:	2300      	movs	r3, #0
 800138c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8001390:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001392:	b103      	cbz	r3, 8001396 <HAL_DMA_IRQHandler+0x46>
        hdma->XferErrorCallback(hdma);
 8001394:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001396:	682a      	ldr	r2, [r5, #0]
 8001398:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800139a:	4b58      	ldr	r3, [pc, #352]	; (80014fc <HAL_DMA_IRQHandler+0x1ac>)
 800139c:	408b      	lsls	r3, r1
 800139e:	421a      	tst	r2, r3
 80013a0:	d01a      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x88>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013aa:	d015      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x88>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b2:	615a      	str	r2, [r3, #20]
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_DMA_IRQHandler+0x1ac>)
 80013b8:	4093      	lsls	r3, r2
 80013ba:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 80013c4:	2304      	movs	r3, #4
 80013c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80013ca:	2300      	movs	r3, #0
 80013cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80013d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013d2:	b10b      	cbz	r3, 80013d8 <HAL_DMA_IRQHandler+0x88>
        hdma->XferErrorCallback(hdma);
 80013d4:	4620      	mov	r0, r4
 80013d6:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d8:	682a      	ldr	r2, [r5, #0]
 80013da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <HAL_DMA_IRQHandler+0x1b0>)
 80013de:	408b      	lsls	r3, r1
 80013e0:	421a      	tst	r2, r3
 80013e2:	d01a      	beq.n	800141a <HAL_DMA_IRQHandler+0xca>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f012 0f02 	tst.w	r2, #2
 80013ec:	d015      	beq.n	800141a <HAL_DMA_IRQHandler+0xca>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f022 0202 	bic.w	r2, r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80013f8:	4b41      	ldr	r3, [pc, #260]	; (8001500 <HAL_DMA_IRQHandler+0x1b0>)
 80013fa:	4093      	lsls	r3, r2
 80013fc:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8001406:	2304      	movs	r3, #4
 8001408:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800140c:	2300      	movs	r3, #0
 800140e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8001412:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001414:	b10b      	cbz	r3, 800141a <HAL_DMA_IRQHandler+0xca>
        hdma->XferErrorCallback(hdma);
 8001416:	4620      	mov	r0, r4
 8001418:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800141a:	682a      	ldr	r2, [r5, #0]
 800141c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800141e:	2310      	movs	r3, #16
 8001420:	408b      	lsls	r3, r1
 8001422:	421a      	tst	r2, r3
 8001424:	d02d      	beq.n	8001482 <HAL_DMA_IRQHandler+0x132>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	f011 0f08 	tst.w	r1, #8
 800142e:	d028      	beq.n	8001482 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001430:	6811      	ldr	r1, [r2, #0]
 8001432:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 8001436:	d011      	beq.n	800145c <HAL_DMA_IRQHandler+0x10c>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001438:	60ab      	str	r3, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0U)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001442:	d103      	bne.n	800144c <HAL_DMA_IRQHandler+0xfc>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8001444:	2331      	movs	r3, #49	; 0x31
 8001446:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800144a:	e016      	b.n	800147a <HAL_DMA_IRQHandler+0x12a>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0U)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001452:	d012      	beq.n	800147a <HAL_DMA_IRQHandler+0x12a>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 8001454:	2341      	movs	r3, #65	; 0x41
 8001456:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800145a:	e00e      	b.n	800147a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001462:	d103      	bne.n	800146c <HAL_DMA_IRQHandler+0x11c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	f023 0308 	bic.w	r3, r3, #8
 800146a:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800146c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800146e:	2310      	movs	r3, #16
 8001470:	4093      	lsls	r3, r2
 8001472:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 8001474:	2331      	movs	r3, #49	; 0x31
 8001476:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferHalfCpltCallback != NULL)
 800147a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800147c:	b10b      	cbz	r3, 8001482 <HAL_DMA_IRQHandler+0x132>
        hdma->XferHalfCpltCallback(hdma);
 800147e:	4620      	mov	r0, r4
 8001480:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001482:	682a      	ldr	r2, [r5, #0]
 8001484:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001486:	2320      	movs	r3, #32
 8001488:	408b      	lsls	r3, r1
 800148a:	421a      	tst	r2, r3
 800148c:	d034      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x1a8>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	6811      	ldr	r1, [r2, #0]
 8001492:	f011 0f10 	tst.w	r1, #16
 8001496:	d02f      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x1a8>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001498:	6811      	ldr	r1, [r2, #0]
 800149a:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800149e:	d013      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x178>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014a0:	60ab      	str	r3, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0U)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 80014aa:	d104      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x166>
          if(hdma->XferM1CpltCallback != NULL)
 80014ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ae:	b31b      	cbz	r3, 80014f8 <HAL_DMA_IRQHandler+0x1a8>
            hdma->XferM1CpltCallback(hdma);
 80014b0:	4620      	mov	r0, r4
 80014b2:	4798      	blx	r3
 80014b4:	bd38      	pop	{r3, r4, r5, pc}
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0U)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80014bc:	d01c      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x1a8>
          if(hdma->XferCpltCallback != NULL)
 80014be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014c0:	b1d3      	cbz	r3, 80014f8 <HAL_DMA_IRQHandler+0x1a8>
            hdma->XferCpltCallback(hdma);
 80014c2:	4620      	mov	r0, r4
 80014c4:	4798      	blx	r3
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014ce:	d103      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x188>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f023 0310 	bic.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80014da:	2320      	movs	r3, #32
 80014dc:	4093      	lsls	r3, r2
 80014de:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 80014e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014e2:	64e3      	str	r3, [r4, #76]	; 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 80014e4:	2311      	movs	r3, #17
 80014e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80014ea:	2300      	movs	r3, #0
 80014ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80014f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014f2:	b10b      	cbz	r3, 80014f8 <HAL_DMA_IRQHandler+0x1a8>
          hdma->XferCpltCallback(hdma);
 80014f4:	4620      	mov	r0, r4
 80014f6:	4798      	blx	r3
 80014f8:	bd38      	pop	{r3, r4, r5, pc}
 80014fa:	bf00      	nop
 80014fc:	00800001 	.word	0x00800001
 8001500:	00800004 	.word	0x00800004

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001508:	2400      	movs	r4, #0
 800150a:	e04b      	b.n	80015a4 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8001510:	f10e 0e08 	add.w	lr, lr, #8
 8001514:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001518:	f004 0607 	and.w	r6, r4, #7
 800151c:	00b6      	lsls	r6, r6, #2
 800151e:	270f      	movs	r7, #15
 8001520:	40b7      	lsls	r7, r6
 8001522:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001526:	690f      	ldr	r7, [r1, #16]
 8001528:	fa07 f606 	lsl.w	r6, r7, r6
 800152c:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 800152e:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8001532:	e046      	b.n	80015c2 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001534:	2608      	movs	r6, #8
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x36>
 8001538:	2600      	movs	r6, #0
 800153a:	fa06 f60e 	lsl.w	r6, r6, lr
 800153e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	3302      	adds	r3, #2
 8001542:	4e61      	ldr	r6, [pc, #388]	; (80016c8 <HAL_GPIO_Init+0x1c4>)
 8001544:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <HAL_GPIO_Init+0x1c8>)
 800154a:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800154c:	43eb      	mvns	r3, r5
 800154e:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001552:	684f      	ldr	r7, [r1, #4]
 8001554:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001558:	d001      	beq.n	800155e <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 800155a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 800155e:	4a5b      	ldr	r2, [pc, #364]	; (80016cc <HAL_GPIO_Init+0x1c8>)
 8001560:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001562:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001564:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001568:	684f      	ldr	r7, [r1, #4]
 800156a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800156e:	d001      	beq.n	8001574 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001570:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001574:	4a55      	ldr	r2, [pc, #340]	; (80016cc <HAL_GPIO_Init+0x1c8>)
 8001576:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001578:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800157a:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157e:	684f      	ldr	r7, [r1, #4]
 8001580:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001584:	d001      	beq.n	800158a <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001586:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 800158a:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_GPIO_Init+0x1c8>)
 800158c:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800158e:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001590:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001592:	684e      	ldr	r6, [r1, #4]
 8001594:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001598:	d001      	beq.n	800159e <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 800159a:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 800159e:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_GPIO_Init+0x1c8>)
 80015a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	3401      	adds	r4, #1
 80015a4:	2c0f      	cmp	r4, #15
 80015a6:	f200 808c 	bhi.w	80016c2 <HAL_GPIO_Init+0x1be>
    ioposition = ((uint32_t)0x01U) << position;
 80015aa:	2301      	movs	r3, #1
 80015ac:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	680a      	ldr	r2, [r1, #0]
 80015b0:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80015b4:	42ab      	cmp	r3, r5
 80015b6:	d1f4      	bne.n	80015a2 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b8:	684a      	ldr	r2, [r1, #4]
 80015ba:	2a02      	cmp	r2, #2
 80015bc:	d0a6      	beq.n	800150c <HAL_GPIO_Init+0x8>
 80015be:	2a12      	cmp	r2, #18
 80015c0:	d0a4      	beq.n	800150c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80015c2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c4:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f20e 	lsl.w	r2, r2, lr
 80015ce:	43d2      	mvns	r2, r2
 80015d0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d2:	684f      	ldr	r7, [r1, #4]
 80015d4:	f007 0703 	and.w	r7, r7, #3
 80015d8:	fa07 f70e 	lsl.w	r7, r7, lr
 80015dc:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80015de:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e0:	684e      	ldr	r6, [r1, #4]
 80015e2:	1e77      	subs	r7, r6, #1
 80015e4:	2f01      	cmp	r7, #1
 80015e6:	d903      	bls.n	80015f0 <HAL_GPIO_Init+0xec>
 80015e8:	2e11      	cmp	r6, #17
 80015ea:	d001      	beq.n	80015f0 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ec:	2e12      	cmp	r6, #18
 80015ee:	d10f      	bne.n	8001610 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 80015f0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f4:	68cf      	ldr	r7, [r1, #12]
 80015f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80015fa:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80015fc:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80015fe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001604:	684e      	ldr	r6, [r1, #4]
 8001606:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800160a:	40a6      	lsls	r6, r4
 800160c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800160e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001610:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	688b      	ldr	r3, [r1, #8]
 8001616:	fa03 f30e 	lsl.w	r3, r3, lr
 800161a:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800161c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161e:	684b      	ldr	r3, [r1, #4]
 8001620:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001624:	d0bd      	beq.n	80015a2 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_GPIO_Init+0x1cc>)
 800162c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800162e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001632:	645a      	str	r2, [r3, #68]	; 0x44
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800163e:	08a3      	lsrs	r3, r4, #2
 8001640:	1c9e      	adds	r6, r3, #2
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <HAL_GPIO_Init+0x1c4>)
 8001644:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001648:	f004 0603 	and.w	r6, r4, #3
 800164c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001650:	260f      	movs	r6, #15
 8001652:	fa06 f60e 	lsl.w	r6, r6, lr
 8001656:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165a:	4f1e      	ldr	r7, [pc, #120]	; (80016d4 <HAL_GPIO_Init+0x1d0>)
 800165c:	42b8      	cmp	r0, r7
 800165e:	f43f af6b 	beq.w	8001538 <HAL_GPIO_Init+0x34>
 8001662:	4e1d      	ldr	r6, [pc, #116]	; (80016d8 <HAL_GPIO_Init+0x1d4>)
 8001664:	42b0      	cmp	r0, r6
 8001666:	d01e      	beq.n	80016a6 <HAL_GPIO_Init+0x1a2>
 8001668:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800166c:	42b0      	cmp	r0, r6
 800166e:	d01c      	beq.n	80016aa <HAL_GPIO_Init+0x1a6>
 8001670:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001674:	42b0      	cmp	r0, r6
 8001676:	d01a      	beq.n	80016ae <HAL_GPIO_Init+0x1aa>
 8001678:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800167c:	42b0      	cmp	r0, r6
 800167e:	d018      	beq.n	80016b2 <HAL_GPIO_Init+0x1ae>
 8001680:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001684:	42b0      	cmp	r0, r6
 8001686:	d016      	beq.n	80016b6 <HAL_GPIO_Init+0x1b2>
 8001688:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800168c:	42b0      	cmp	r0, r6
 800168e:	d014      	beq.n	80016ba <HAL_GPIO_Init+0x1b6>
 8001690:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001694:	42b0      	cmp	r0, r6
 8001696:	d012      	beq.n	80016be <HAL_GPIO_Init+0x1ba>
 8001698:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800169c:	42b0      	cmp	r0, r6
 800169e:	f43f af49 	beq.w	8001534 <HAL_GPIO_Init+0x30>
 80016a2:	2609      	movs	r6, #9
 80016a4:	e749      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016a6:	2601      	movs	r6, #1
 80016a8:	e747      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016aa:	2602      	movs	r6, #2
 80016ac:	e745      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016ae:	2603      	movs	r6, #3
 80016b0:	e743      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016b2:	2604      	movs	r6, #4
 80016b4:	e741      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016b6:	2605      	movs	r6, #5
 80016b8:	e73f      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016ba:	2606      	movs	r6, #6
 80016bc:	e73d      	b.n	800153a <HAL_GPIO_Init+0x36>
 80016be:	2607      	movs	r6, #7
 80016c0:	e73b      	b.n	800153a <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80016c2:	b003      	add	sp, #12
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40013c00 	.word	0x40013c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	b912      	cbnz	r2, 80016e4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	6181      	str	r1, [r0, #24]
 80016e2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80016e4:	6181      	str	r1, [r0, #24]
 80016e6:	4770      	bx	lr

080016e8 <HAL_RCC_OscConfig>:
  *         first and then HSE On or HSE Bypass.
  
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b530      	push	{r4, r5, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	6803      	ldr	r3, [r0, #0]
 80016f0:	f013 0f01 	tst.w	r3, #1
 80016f4:	d02e      	beq.n	8001754 <HAL_RCC_OscConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f6:	4ba3      	ldr	r3, [pc, #652]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d01f      	beq.n	8001742 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4ba0      	ldr	r3, [pc, #640]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d014      	beq.n	8001738 <HAL_RCC_OscConfig+0x50>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170e:	7922      	ldrb	r2, [r4, #4]
 8001710:	4b9d      	ldr	r3, [pc, #628]	; (8001988 <HAL_RCC_OscConfig+0x2a0>)
 8001712:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d040      	beq.n	800179c <HAL_RCC_OscConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fd3b 	bl	8001194 <HAL_GetTick>
 800171e:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	4b98      	ldr	r3, [pc, #608]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001728:	d114      	bne.n	8001754 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172a:	f7ff fd33 	bl	8001194 <HAL_GetTick>
 800172e:	1b40      	subs	r0, r0, r5
 8001730:	2864      	cmp	r0, #100	; 0x64
 8001732:	d9f5      	bls.n	8001720 <HAL_RCC_OscConfig+0x38>
          {
            return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
 8001736:	e170      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001740:	d0e5      	beq.n	800170e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b90      	ldr	r3, [pc, #576]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800174a:	d003      	beq.n	8001754 <HAL_RCC_OscConfig+0x6c>
 800174c:	6863      	ldr	r3, [r4, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8160 	beq.w	8001a14 <HAL_RCC_OscConfig+0x32c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	f013 0f02 	tst.w	r3, #2
 800175a:	d04b      	beq.n	80017f4 <HAL_RCC_OscConfig+0x10c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175c:	4b89      	ldr	r3, [pc, #548]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f013 0f0c 	tst.w	r3, #12
 8001764:	d02e      	beq.n	80017c4 <HAL_RCC_OscConfig+0xdc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b87      	ldr	r3, [pc, #540]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176e:	2b08      	cmp	r3, #8
 8001770:	d023      	beq.n	80017ba <HAL_RCC_OscConfig+0xd2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001772:	68e3      	ldr	r3, [r4, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d064      	beq.n	8001842 <HAL_RCC_OscConfig+0x15a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	2201      	movs	r2, #1
 800177a:	4b84      	ldr	r3, [pc, #528]	; (800198c <HAL_RCC_OscConfig+0x2a4>)
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fd09 	bl	8001194 <HAL_GetTick>
 8001782:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f013 0f02 	tst.w	r3, #2
 800178c:	d14a      	bne.n	8001824 <HAL_RCC_OscConfig+0x13c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fd01 	bl	8001194 <HAL_GetTick>
 8001792:	1b40      	subs	r0, r0, r5
 8001794:	2802      	cmp	r0, #2
 8001796:	d9f5      	bls.n	8001784 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 8001798:	2003      	movs	r0, #3
 800179a:	e13e      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
        tickstart = HAL_GetTick();
 800179c:	f7ff fcfa 	bl	8001194 <HAL_GetTick>
 80017a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b78      	ldr	r3, [pc, #480]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017aa:	d0d3      	beq.n	8001754 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fcf2 	bl	8001194 <HAL_GetTick>
 80017b0:	1b40      	subs	r0, r0, r5
 80017b2:	2864      	cmp	r0, #100	; 0x64
 80017b4:	d9f5      	bls.n	80017a2 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80017b6:	2003      	movs	r0, #3
 80017b8:	e12f      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017c2:	d1d6      	bne.n	8001772 <HAL_RCC_OscConfig+0x8a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c4:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f013 0f02 	tst.w	r3, #2
 80017cc:	d004      	beq.n	80017d8 <HAL_RCC_OscConfig+0xf0>
 80017ce:	68e3      	ldr	r3, [r4, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0xf0>
        return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
 80017d6:	e120      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	486a      	ldr	r0, [pc, #424]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80017da:	6803      	ldr	r3, [r0, #0]
 80017dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017e0:	6921      	ldr	r1, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e2:	22f8      	movs	r2, #248	; 0xf8
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4313      	orrs	r3, r2
 80017f2:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	f013 0f08 	tst.w	r3, #8
 80017fa:	d046      	beq.n	800188a <HAL_RCC_OscConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017fc:	6963      	ldr	r3, [r4, #20]
 80017fe:	b393      	cbz	r3, 8001866 <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001800:	2201      	movs	r2, #1
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x2a8>)
 8001804:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fcc5 	bl	8001194 <HAL_GetTick>
 800180a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	4b5d      	ldr	r3, [pc, #372]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	f013 0f02 	tst.w	r3, #2
 8001814:	d139      	bne.n	800188a <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff fcbd 	bl	8001194 <HAL_GetTick>
 800181a:	1b40      	subs	r0, r0, r5
 800181c:	2802      	cmp	r0, #2
 800181e:	d9f5      	bls.n	800180c <HAL_RCC_OscConfig+0x124>
        {
          return HAL_TIMEOUT;
 8001820:	2003      	movs	r0, #3
 8001822:	e0fa      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4857      	ldr	r0, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001826:	6803      	ldr	r3, [r0, #0]
 8001828:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800182c:	6921      	ldr	r1, [r4, #16]
 800182e:	22f8      	movs	r2, #248	; 0xf8
 8001830:	fa92 f2a2 	rbit	r2, r2
 8001834:	fab2 f282 	clz	r2, r2
 8001838:	fa01 f202 	lsl.w	r2, r1, r2
 800183c:	4313      	orrs	r3, r2
 800183e:	6003      	str	r3, [r0, #0]
 8001840:	e7d8      	b.n	80017f4 <HAL_RCC_OscConfig+0x10c>
        __HAL_RCC_HSI_DISABLE();
 8001842:	2200      	movs	r2, #0
 8001844:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_RCC_OscConfig+0x2a4>)
 8001846:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001848:	f7ff fca4 	bl	8001194 <HAL_GetTick>
 800184c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f013 0f02 	tst.w	r3, #2
 8001856:	d0cd      	beq.n	80017f4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc9c 	bl	8001194 <HAL_GetTick>
 800185c:	1b40      	subs	r0, r0, r5
 800185e:	2802      	cmp	r0, #2
 8001860:	d9f5      	bls.n	800184e <HAL_RCC_OscConfig+0x166>
            return HAL_TIMEOUT;
 8001862:	2003      	movs	r0, #3
 8001864:	e0d9      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001866:	2200      	movs	r2, #0
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x2a8>)
 800186a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fc92 	bl	8001194 <HAL_GetTick>
 8001870:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001876:	f013 0f02 	tst.w	r3, #2
 800187a:	d006      	beq.n	800188a <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fc8a 	bl	8001194 <HAL_GetTick>
 8001880:	1b40      	subs	r0, r0, r5
 8001882:	2802      	cmp	r0, #2
 8001884:	d9f5      	bls.n	8001872 <HAL_RCC_OscConfig+0x18a>
        {
          return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
 8001888:	e0c7      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	f013 0f04 	tst.w	r3, #4
 8001890:	d11f      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ea>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001892:	69a3      	ldr	r3, [r4, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80bf 	beq.w	8001a18 <HAL_RCC_OscConfig+0x330>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189a:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 800189c:	6892      	ldr	r2, [r2, #8]
 800189e:	f002 020c 	and.w	r2, r2, #12
 80018a2:	2a08      	cmp	r2, #8
 80018a4:	f000 80bb 	beq.w	8001a1e <HAL_RCC_OscConfig+0x336>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d059      	beq.n	8001960 <HAL_RCC_OscConfig+0x278>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	2200      	movs	r2, #0
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fc6f 	bl	8001194 <HAL_GetTick>
 80018b6:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018c0:	f000 80a6 	beq.w	8001a10 <HAL_RCC_OscConfig+0x328>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fc66 	bl	8001194 <HAL_GetTick>
 80018c8:	1b00      	subs	r0, r0, r4
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9f4      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	e0a3      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
    __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 80018d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80018ea:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_RCC_OscConfig+0x2b0>)
 80018ec:	6813      	ldr	r3, [r2, #0]
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80018f4:	f7ff fc4e 	bl	8001194 <HAL_GetTick>
 80018f8:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x2b0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x22a>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001904:	f7ff fc46 	bl	8001194 <HAL_GetTick>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	2802      	cmp	r0, #2
 800190c:	d9f5      	bls.n	80018fa <HAL_RCC_OscConfig+0x212>
        return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	e083      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	7a22      	ldrb	r2, [r4, #8]
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x2b4>)
 8001916:	701a      	strb	r2, [r3, #0]
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	68a3      	ldr	r3, [r4, #8]
 800191a:	b183      	cbz	r3, 800193e <HAL_RCC_OscConfig+0x256>
      tickstart = HAL_GetTick();
 800191c:	f7ff fc3a 	bl	8001194 <HAL_GetTick>
 8001920:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	f013 0f02 	tst.w	r3, #2
 800192a:	d1b2      	bne.n	8001892 <HAL_RCC_OscConfig+0x1aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fc32 	bl	8001194 <HAL_GetTick>
 8001930:	1b40      	subs	r0, r0, r5
 8001932:	f241 3388 	movw	r3, #5000	; 0x1388
 8001936:	4298      	cmp	r0, r3
 8001938:	d9f3      	bls.n	8001922 <HAL_RCC_OscConfig+0x23a>
          return HAL_TIMEOUT;
 800193a:	2003      	movs	r0, #3
 800193c:	e06d      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
      tickstart = HAL_GetTick();
 800193e:	f7ff fc29 	bl	8001194 <HAL_GetTick>
 8001942:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	f013 0f02 	tst.w	r3, #2
 800194c:	d0a1      	beq.n	8001892 <HAL_RCC_OscConfig+0x1aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fc21 	bl	8001194 <HAL_GetTick>
 8001952:	1b40      	subs	r0, r0, r5
 8001954:	f241 3388 	movw	r3, #5000	; 0x1388
 8001958:	4298      	cmp	r0, r3
 800195a:	d9f3      	bls.n	8001944 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 800195c:	2003      	movs	r0, #3
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_PLL_DISABLE();
 8001960:	2200      	movs	r2, #0
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001966:	f7ff fc15 	bl	8001194 <HAL_GetTick>
 800196a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_OscConfig+0x29c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001974:	d014      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2b8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff fc0d 	bl	8001194 <HAL_GetTick>
 800197a:	1b40      	subs	r0, r0, r5
 800197c:	2802      	cmp	r0, #2
 800197e:	d9f5      	bls.n	800196c <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8001980:	2003      	movs	r0, #3
 8001982:	e04a      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
 8001984:	40023800 	.word	0x40023800
 8001988:	40023802 	.word	0x40023802
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
 8001994:	42470060 	.word	0x42470060
 8001998:	40007000 	.word	0x40007000
 800199c:	40023870 	.word	0x40023870
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a0:	69e3      	ldr	r3, [r4, #28]
 80019a2:	6a22      	ldr	r2, [r4, #32]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80019a8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80019ac:	fa92 f2a2 	rbit	r2, r2
 80019b0:	fab2 f282 	clz	r2, r2
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4313      	orrs	r3, r2
 80019ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019bc:	0852      	lsrs	r2, r2, #1
 80019be:	3a01      	subs	r2, #1
 80019c0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80019c4:	fa91 f1a1 	rbit	r1, r1
 80019c8:	fab1 f181 	clz	r1, r1
 80019cc:	408a      	lsls	r2, r1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80019d2:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80019d6:	fa92 f2a2 	rbit	r2, r2
 80019da:	fab2 f282 	clz	r2, r2
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4313      	orrs	r3, r2
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x33c>)
 80019e6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80019e8:	2201      	movs	r2, #1
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_RCC_OscConfig+0x340>)
 80019ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ee:	f7ff fbd1 	bl	8001194 <HAL_GetTick>
 80019f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x33c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x324>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff fbc9 	bl	8001194 <HAL_GetTick>
 8001a02:	1b00      	subs	r0, r0, r4
 8001a04:	2802      	cmp	r0, #2
 8001a06:	d9f5      	bls.n	80019f4 <HAL_RCC_OscConfig+0x30c>
            return HAL_TIMEOUT;
 8001a08:	2003      	movs	r0, #3
 8001a0a:	e006      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e004      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
 8001a10:	2000      	movs	r0, #0
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
        return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
  return HAL_OK;
 8001a18:	2000      	movs	r0, #0
}
 8001a1a:	b003      	add	sp, #12
 8001a1c:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e7fb      	b.n	8001a1a <HAL_RCC_OscConfig+0x332>
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	42470060 	.word	0x42470060

08001a2c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a2c:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x164>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	428b      	cmp	r3, r1
 8001a36:	d209      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x20>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a38:	b2cb      	uxtb	r3, r1
 8001a3a:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_RCC_ClockConfig+0x164>)
 8001a3c:	7013      	strb	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x20>
    {
      return HAL_ERROR;
 8001a48:	2001      	movs	r0, #1
 8001a4a:	4770      	bx	lr
{
 8001a4c:	b570      	push	{r4, r5, r6, lr}
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4e:	6803      	ldr	r3, [r0, #0]
 8001a50:	f013 0f02 	tst.w	r3, #2
 8001a54:	d006      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x38>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a56:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001a58:	6893      	ldr	r3, [r2, #8]
 8001a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5e:	6884      	ldr	r4, [r0, #8]
 8001a60:	4323      	orrs	r3, r4
 8001a62:	6093      	str	r3, [r2, #8]
 8001a64:	460d      	mov	r5, r1
 8001a66:	4604      	mov	r4, r0
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a68:	6803      	ldr	r3, [r0, #0]
 8001a6a:	f013 0f01 	tst.w	r3, #1
 8001a6e:	d060      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x106>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a70:	6843      	ldr	r3, [r0, #4]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d026      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x98>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001a76:	1e9a      	subs	r2, r3, #2
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	d92a      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0xa6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f012 0f02 	tst.w	r2, #2
 8001a84:	f000 8081 	beq.w	8001b8a <HAL_RCC_ClockConfig+0x15e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4942      	ldr	r1, [pc, #264]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001a8a:	688a      	ldr	r2, [r1, #8]
 8001a8c:	f022 0203 	bic.w	r2, r2, #3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a94:	f7ff fb7e 	bl	8001194 <HAL_GetTick>
 8001a98:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d01f      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0xb4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d02c      	beq.n	8001afe <HAL_RCC_ClockConfig+0xd2>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d039      	beq.n	8001b1c <HAL_RCC_ClockConfig+0xf0>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f013 0f0c 	tst.w	r3, #12
 8001ab0:	d03f      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x106>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab2:	f7ff fb6f 	bl	8001194 <HAL_GetTick>
 8001ab6:	1b80      	subs	r0, r0, r6
 8001ab8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001abc:	4298      	cmp	r0, r3
 8001abe:	d9f3      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0x7c>
        {
          return HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	4a33      	ldr	r2, [pc, #204]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001acc:	d1dc      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8001ace:	2001      	movs	r0, #1
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ada:	d1d5      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x5c>
        return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d022      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x106>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff fb52 	bl	8001194 <HAL_GetTick>
 8001af0:	1b80      	subs	r0, r0, r6
 8001af2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001af6:	4298      	cmp	r0, r3
 8001af8:	d9f2      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
 8001afc:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d013      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x106>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7ff fb43 	bl	8001194 <HAL_GetTick>
 8001b0e:	1b80      	subs	r0, r0, r6
 8001b10:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b14:	4298      	cmp	r0, r3
 8001b16:	d9f2      	bls.n	8001afe <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8001b18:	2003      	movs	r0, #3
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fb38 	bl	8001194 <HAL_GetTick>
 8001b24:	1b80      	subs	r0, r0, r6
 8001b26:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b2a:	4298      	cmp	r0, r3
 8001b2c:	d9f6      	bls.n	8001b1c <HAL_RCC_ClockConfig+0xf0>
          return HAL_TIMEOUT;
 8001b2e:	2003      	movs	r0, #3
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_RCC_ClockConfig+0x164>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	429d      	cmp	r5, r3
 8001b3c:	d209      	bcs.n	8001b52 <HAL_RCC_ClockConfig+0x126>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3e:	b2ea      	uxtb	r2, r5
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_RCC_ClockConfig+0x164>)
 8001b42:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x126>
    {
      return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	f013 0f04 	tst.w	r3, #4
 8001b58:	d006      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001b5c:	6893      	ldr	r3, [r2, #8]
 8001b5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b62:	68e1      	ldr	r1, [r4, #12]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f013 0f08 	tst.w	r3, #8
 8001b6e:	d007      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_RCC_ClockConfig+0x168>)
 8001b72:	6893      	ldr	r3, [r2, #8]
 8001b74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b78:	6921      	ldr	r1, [r4, #16]
 8001b7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b7e:	6093      	str	r3, [r2, #8]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fad1 	bl	8001128 <HAL_InitTick>
  return HAL_OK;
 8001b86:	2000      	movs	r0, #0
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x88>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d03a      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x82>
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	481e      	ldr	r0, [pc, #120]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001baa:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x88>)
 8001bae:	6858      	ldr	r0, [r3, #4]
 8001bb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001bba:	d01e      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001bbc:	4a1a      	ldr	r2, [pc, #104]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x90>)
 8001bbe:	fbb2 f2f0 	udiv	r2, r2, r0
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x88>)
 8001bc4:	6858      	ldr	r0, [r3, #4]
 8001bc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bca:	4018      	ands	r0, r3
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	40d8      	lsrs	r0, r3
 8001bd6:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x88>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001be6:	fa92 f2a2 	rbit	r2, r2
 8001bea:	fab2 f282 	clz	r2, r2
 8001bee:	40d3      	lsrs	r3, r2
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8001bf4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001bf8:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001bfc:	fbb2 f2f0 	udiv	r2, r2, r0
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x88>)
 8001c02:	6858      	ldr	r0, [r3, #4]
 8001c04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c08:	4018      	ands	r0, r3
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	40d8      	lsrs	r0, r3
 8001c14:	fb00 f002 	mul.w	r0, r0, r2
 8001c18:	e7df      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
 8001c1a:	4803      	ldr	r0, [pc, #12]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	017d7840 	.word	0x017d7840

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001c2e:	f7ff ffb3 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x28>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c3a:	22f0      	movs	r2, #240	; 0xf0
 8001c3c:	fa92 f2a2 	rbit	r2, r2
 8001c40:	fab2 f282 	clz	r2, r2
 8001c44:	40d3      	lsrs	r3, r2
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	40d8      	lsrs	r0, r3
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_GetHCLKFreq+0x30>)
 8001c4e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001c50:	bd08      	pop	{r3, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	080037a8 	.word	0x080037a8
 8001c5c:	20000008 	.word	0x20000008

08001c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001c60:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001c62:	f7ff ffe3 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c6e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001c72:	fa92 f2a2 	rbit	r2, r2
 8001c76:	fab2 f282 	clz	r2, r2
 8001c7a:	40d3      	lsrs	r3, r2
 8001c7c:	4a02      	ldr	r2, [pc, #8]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c80:	40d8      	lsrs	r0, r3
 8001c82:	bd08      	pop	{r3, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	080037a8 	.word	0x080037a8

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001c8e:	f7ff ffcd 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c9a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001c9e:	fa92 f2a2 	rbit	r2, r2
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	40d3      	lsrs	r3, r2
 8001ca8:	4a02      	ldr	r2, [pc, #8]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001cac:	40d8      	lsrs	r0, r3
 8001cae:	bd08      	pop	{r3, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	080037a8 	.word	0x080037a8

08001cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cb8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cba:	6a03      	ldr	r3, [r0, #32]
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cc2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001cc4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cc6:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cc8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ccc:	680d      	ldr	r5, [r1, #0]
 8001cce:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cd0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cd4:	688d      	ldr	r5, [r1, #8]
 8001cd6:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001cd8:	4d0f      	ldr	r5, [pc, #60]	; (8001d18 <TIM_OC1_SetConfig+0x60>)
 8001cda:	42a8      	cmp	r0, r5
 8001cdc:	d01a      	beq.n	8001d14 <TIM_OC1_SetConfig+0x5c>
 8001cde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ce2:	42a8      	cmp	r0, r5
 8001ce4:	d014      	beq.n	8001d10 <TIM_OC1_SetConfig+0x58>
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	b15d      	cbz	r5, 8001d02 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cea:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cee:	68cd      	ldr	r5, [r1, #12]
 8001cf0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cf6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001cfa:	694d      	ldr	r5, [r1, #20]
 8001cfc:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cfe:	698d      	ldr	r5, [r1, #24]
 8001d00:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d02:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d04:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d06:	684a      	ldr	r2, [r1, #4]
 8001d08:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001d0a:	6203      	str	r3, [r0, #32]
} 
 8001d0c:	bc30      	pop	{r4, r5}
 8001d0e:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d10:	2501      	movs	r5, #1
 8001d12:	e7e9      	b.n	8001ce8 <TIM_OC1_SetConfig+0x30>
 8001d14:	2501      	movs	r5, #1
 8001d16:	e7e7      	b.n	8001ce8 <TIM_OC1_SetConfig+0x30>
 8001d18:	40010000 	.word	0x40010000

08001d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d1c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d1e:	6a03      	ldr	r3, [r0, #32]
 8001d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d24:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d28:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d2a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001d2c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d30:	680d      	ldr	r5, [r1, #0]
 8001d32:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d38:	688d      	ldr	r5, [r1, #8]
 8001d3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d3e:	4d11      	ldr	r5, [pc, #68]	; (8001d84 <TIM_OC3_SetConfig+0x68>)
 8001d40:	42a8      	cmp	r0, r5
 8001d42:	d01d      	beq.n	8001d80 <TIM_OC3_SetConfig+0x64>
 8001d44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d48:	42a8      	cmp	r0, r5
 8001d4a:	d017      	beq.n	8001d7c <TIM_OC3_SetConfig+0x60>
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	b175      	cbz	r5, 8001d6e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d54:	68cd      	ldr	r5, [r1, #12]
 8001d56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d5e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d62:	694d      	ldr	r5, [r1, #20]
 8001d64:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d68:	698d      	ldr	r5, [r1, #24]
 8001d6a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d6e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d70:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d72:	684a      	ldr	r2, [r1, #4]
 8001d74:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d76:	6203      	str	r3, [r0, #32]
}
 8001d78:	bc30      	pop	{r4, r5}
 8001d7a:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d7c:	2501      	movs	r5, #1
 8001d7e:	e7e6      	b.n	8001d4e <TIM_OC3_SetConfig+0x32>
 8001d80:	2501      	movs	r5, #1
 8001d82:	e7e4      	b.n	8001d4e <TIM_OC3_SetConfig+0x32>
 8001d84:	40010000 	.word	0x40010000

08001d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d88:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d8a:	6a03      	ldr	r3, [r0, #32]
 8001d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d90:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d94:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d96:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d98:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d9c:	680d      	ldr	r5, [r1, #0]
 8001d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001da6:	688d      	ldr	r5, [r1, #8]
 8001da8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001dac:	4d0c      	ldr	r5, [pc, #48]	; (8001de0 <TIM_OC4_SetConfig+0x58>)
 8001dae:	42a8      	cmp	r0, r5
 8001db0:	d013      	beq.n	8001dda <TIM_OC4_SetConfig+0x52>
 8001db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001db6:	42a8      	cmp	r0, r5
 8001db8:	d00d      	beq.n	8001dd6 <TIM_OC4_SetConfig+0x4e>
 8001dba:	2500      	movs	r5, #0
 8001dbc:	b125      	cbz	r5, 8001dc8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001dbe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001dc2:	694d      	ldr	r5, [r1, #20]
 8001dc4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dc8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001dca:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001dcc:	684a      	ldr	r2, [r1, #4]
 8001dce:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd0:	6203      	str	r3, [r0, #32]
}
 8001dd2:	bc30      	pop	{r4, r5}
 8001dd4:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001dd6:	2501      	movs	r5, #1
 8001dd8:	e7f0      	b.n	8001dbc <TIM_OC4_SetConfig+0x34>
 8001dda:	2501      	movs	r5, #1
 8001ddc:	e7ee      	b.n	8001dbc <TIM_OC4_SetConfig+0x34>
 8001dde:	bf00      	nop
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_TIM_PeriodElapsedCallback>:
{
 8001de4:	4770      	bx	lr

08001de6 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIM_IC_CaptureCallback>:
{
 8001de8:	4770      	bx	lr

08001dea <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_TriggerCallback>:
{
 8001dec:	4770      	bx	lr

08001dee <HAL_TIM_IRQHandler>:
{
 8001dee:	b510      	push	{r4, lr}
 8001df0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df2:	6803      	ldr	r3, [r0, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	f012 0f02 	tst.w	r2, #2
 8001dfa:	d011      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	f012 0f02 	tst.w	r2, #2
 8001e02:	d00d      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e04:	f06f 0202 	mvn.w	r2, #2
 8001e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f013 0f03 	tst.w	r3, #3
 8001e16:	d070      	beq.n	8001efa <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e18:	f7ff ffe6 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	f012 0f04 	tst.w	r2, #4
 8001e28:	d012      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	f012 0f04 	tst.w	r2, #4
 8001e30:	d00e      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e32:	f06f 0204 	mvn.w	r2, #4
 8001e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e44:	d05f      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff ffce 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	f012 0f08 	tst.w	r2, #8
 8001e58:	d012      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	f012 0f08 	tst.w	r2, #8
 8001e60:	d00e      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e62:	f06f 0208 	mvn.w	r2, #8
 8001e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f013 0f03 	tst.w	r3, #3
 8001e74:	d04e      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff ffb6 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	f012 0f10 	tst.w	r2, #16
 8001e88:	d012      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	f012 0f10 	tst.w	r2, #16
 8001e90:	d00e      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e92:	f06f 0210 	mvn.w	r2, #16
 8001e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ea4:	d03d      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff ff9e 	bl	8001de8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eac:	2300      	movs	r3, #0
 8001eae:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	f012 0f01 	tst.w	r2, #1
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	f012 0f01 	tst.w	r2, #1
 8001ec0:	d136      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001eca:	d003      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ed2:	d134      	bne.n	8001f3e <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ee4:	d132      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	f012 0f20 	tst.w	r2, #32
 8001eee:	d003      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	f012 0f20 	tst.w	r2, #32
 8001ef6:	d130      	bne.n	8001f5a <HAL_TIM_IRQHandler+0x16c>
 8001ef8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	f7ff ff74 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff ff73 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
 8001f04:	e78a      	b.n	8001e1c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ff6d 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ff6c 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
 8001f12:	e79b      	b.n	8001e4c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7ff ff66 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff ff65 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
 8001f20:	e7ac      	b.n	8001e7c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff5f 	bl	8001de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff ff5e 	bl	8001dea <HAL_TIM_PWM_PulseFinishedCallback>
 8001f2e:	e7bd      	b.n	8001eac <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff ff54 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
 8001f3c:	e7c1      	b.n	8001ec2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 f9ff 	bl	8002348 <HAL_TIMEx_BreakCallback>
 8001f4a:	e7c3      	b.n	8001ed4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f50:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff ff4a 	bl	8001dec <HAL_TIM_TriggerCallback>
 8001f58:	e7c5      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f5a:	f06f 0220 	mvn.w	r2, #32
 8001f5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001f60:	4620      	mov	r0, r4
 8001f62:	f000 f9f0 	bl	8002346 <HAL_TIMEx_CommutationCallback>
}
 8001f66:	e7c7      	b.n	8001ef8 <HAL_TIM_IRQHandler+0x10a>

08001f68 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001f68:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f6a:	4a45      	ldr	r2, [pc, #276]	; (8002080 <TIM_Base_SetConfig+0x118>)
 8001f6c:	4290      	cmp	r0, r2
 8001f6e:	d04a      	beq.n	8002006 <TIM_Base_SetConfig+0x9e>
 8001f70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f74:	d049      	beq.n	800200a <TIM_Base_SetConfig+0xa2>
 8001f76:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f7a:	4290      	cmp	r0, r2
 8001f7c:	d047      	beq.n	800200e <TIM_Base_SetConfig+0xa6>
 8001f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d045      	beq.n	8002012 <TIM_Base_SetConfig+0xaa>
 8001f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f8a:	4290      	cmp	r0, r2
 8001f8c:	d043      	beq.n	8002016 <TIM_Base_SetConfig+0xae>
 8001f8e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d035      	beq.n	8002002 <TIM_Base_SetConfig+0x9a>
 8001f96:	2200      	movs	r2, #0
 8001f98:	b11a      	cbz	r2, 8001fa2 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f9e:	684a      	ldr	r2, [r1, #4]
 8001fa0:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001fa2:	4a37      	ldr	r2, [pc, #220]	; (8002080 <TIM_Base_SetConfig+0x118>)
 8001fa4:	4290      	cmp	r0, r2
 8001fa6:	d03a      	beq.n	800201e <TIM_Base_SetConfig+0xb6>
 8001fa8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fac:	d050      	beq.n	8002050 <TIM_Base_SetConfig+0xe8>
 8001fae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fb2:	4290      	cmp	r0, r2
 8001fb4:	d04e      	beq.n	8002054 <TIM_Base_SetConfig+0xec>
 8001fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fba:	4290      	cmp	r0, r2
 8001fbc:	d04c      	beq.n	8002058 <TIM_Base_SetConfig+0xf0>
 8001fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc2:	4290      	cmp	r0, r2
 8001fc4:	d04a      	beq.n	800205c <TIM_Base_SetConfig+0xf4>
 8001fc6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	d048      	beq.n	8002060 <TIM_Base_SetConfig+0xf8>
 8001fce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	d046      	beq.n	8002064 <TIM_Base_SetConfig+0xfc>
 8001fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d044      	beq.n	8002068 <TIM_Base_SetConfig+0x100>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d042      	beq.n	800206c <TIM_Base_SetConfig+0x104>
 8001fe6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d040      	beq.n	8002070 <TIM_Base_SetConfig+0x108>
 8001fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d03e      	beq.n	8002074 <TIM_Base_SetConfig+0x10c>
 8001ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d00d      	beq.n	800201a <TIM_Base_SetConfig+0xb2>
 8001ffe:	2200      	movs	r2, #0
 8002000:	e00e      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002002:	2201      	movs	r2, #1
 8002004:	e7c8      	b.n	8001f98 <TIM_Base_SetConfig+0x30>
 8002006:	2201      	movs	r2, #1
 8002008:	e7c6      	b.n	8001f98 <TIM_Base_SetConfig+0x30>
 800200a:	2201      	movs	r2, #1
 800200c:	e7c4      	b.n	8001f98 <TIM_Base_SetConfig+0x30>
 800200e:	2201      	movs	r2, #1
 8002010:	e7c2      	b.n	8001f98 <TIM_Base_SetConfig+0x30>
 8002012:	2201      	movs	r2, #1
 8002014:	e7c0      	b.n	8001f98 <TIM_Base_SetConfig+0x30>
 8002016:	2201      	movs	r2, #1
 8002018:	e7be      	b.n	8001f98 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800201a:	2201      	movs	r2, #1
 800201c:	e000      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 800201e:	2201      	movs	r2, #1
 8002020:	b11a      	cbz	r2, 800202a <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	68ca      	ldr	r2, [r1, #12]
 8002028:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800202a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202c:	688b      	ldr	r3, [r1, #8]
 800202e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002030:	680b      	ldr	r3, [r1, #0]
 8002032:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <TIM_Base_SetConfig+0x118>)
 8002036:	4298      	cmp	r0, r3
 8002038:	d020      	beq.n	800207c <TIM_Base_SetConfig+0x114>
 800203a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203e:	4298      	cmp	r0, r3
 8002040:	d01a      	beq.n	8002078 <TIM_Base_SetConfig+0x110>
 8002042:	2300      	movs	r3, #0
 8002044:	b10b      	cbz	r3, 800204a <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 8002046:	690b      	ldr	r3, [r1, #16]
 8002048:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800204a:	2301      	movs	r3, #1
 800204c:	6143      	str	r3, [r0, #20]
 800204e:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002050:	2201      	movs	r2, #1
 8002052:	e7e5      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002054:	2201      	movs	r2, #1
 8002056:	e7e3      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002058:	2201      	movs	r2, #1
 800205a:	e7e1      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 800205c:	2201      	movs	r2, #1
 800205e:	e7df      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002060:	2201      	movs	r2, #1
 8002062:	e7dd      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002064:	2201      	movs	r2, #1
 8002066:	e7db      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002068:	2201      	movs	r2, #1
 800206a:	e7d9      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 800206c:	2201      	movs	r2, #1
 800206e:	e7d7      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002070:	2201      	movs	r2, #1
 8002072:	e7d5      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
 8002074:	2201      	movs	r2, #1
 8002076:	e7d3      	b.n	8002020 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002078:	2301      	movs	r3, #1
 800207a:	e7e3      	b.n	8002044 <TIM_Base_SetConfig+0xdc>
 800207c:	2301      	movs	r3, #1
 800207e:	e7e1      	b.n	8002044 <TIM_Base_SetConfig+0xdc>
 8002080:	40010000 	.word	0x40010000

08002084 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8002084:	b1a8      	cbz	r0, 80020b2 <HAL_TIM_PWM_Init+0x2e>
{
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800208a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800208e:	b15b      	cbz	r3, 80020a8 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002090:	2302      	movs	r3, #2
 8002092:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002096:	1d21      	adds	r1, r4, #4
 8002098:	6820      	ldr	r0, [r4, #0]
 800209a:	f7ff ff65 	bl	8001f68 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800209e:	2301      	movs	r3, #1
 80020a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
 80020a6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80020a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80020ac:	f7fe fe22 	bl	8000cf4 <HAL_TIM_PWM_MspInit>
 80020b0:	e7ee      	b.n	8002090 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
 80020b4:	4770      	bx	lr
	...

080020b8 <TIM_OC2_SetConfig>:
{
 80020b8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ba:	6a03      	ldr	r3, [r0, #32]
 80020bc:	f023 0310 	bic.w	r3, r3, #16
 80020c0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020c2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80020c4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80020c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020c8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020cc:	680d      	ldr	r5, [r1, #0]
 80020ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80020d2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020d6:	688d      	ldr	r5, [r1, #8]
 80020d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020dc:	4d11      	ldr	r5, [pc, #68]	; (8002124 <TIM_OC2_SetConfig+0x6c>)
 80020de:	42a8      	cmp	r0, r5
 80020e0:	d01d      	beq.n	800211e <TIM_OC2_SetConfig+0x66>
 80020e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020e6:	42a8      	cmp	r0, r5
 80020e8:	d017      	beq.n	800211a <TIM_OC2_SetConfig+0x62>
 80020ea:	2500      	movs	r5, #0
 80020ec:	b175      	cbz	r5, 800210c <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 80020ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020f2:	68cd      	ldr	r5, [r1, #12]
 80020f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80020f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020fc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002100:	694d      	ldr	r5, [r1, #20]
 8002102:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002106:	698d      	ldr	r5, [r1, #24]
 8002108:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800210c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800210e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002110:	684a      	ldr	r2, [r1, #4]
 8002112:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002114:	6203      	str	r3, [r0, #32]
}
 8002116:	bc30      	pop	{r4, r5}
 8002118:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800211a:	2501      	movs	r5, #1
 800211c:	e7e6      	b.n	80020ec <TIM_OC2_SetConfig+0x34>
 800211e:	2501      	movs	r5, #1
 8002120:	e7e4      	b.n	80020ec <TIM_OC2_SetConfig+0x34>
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000

08002128 <HAL_TIM_PWM_ConfigChannel>:
{
 8002128:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800212a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800212e:	2b01      	cmp	r3, #1
 8002130:	d066      	beq.n	8002200 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002132:	460d      	mov	r5, r1
 8002134:	4604      	mov	r4, r0
 8002136:	2301      	movs	r3, #1
 8002138:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	2302      	movs	r3, #2
 800213e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8002142:	2a0c      	cmp	r2, #12
 8002144:	d81a      	bhi.n	800217c <HAL_TIM_PWM_ConfigChannel+0x54>
 8002146:	e8df f002 	tbb	[pc, r2]
 800214a:	1907      	.short	0x1907
 800214c:	19201919 	.word	0x19201919
 8002150:	19341919 	.word	0x19341919
 8002154:	1919      	.short	0x1919
 8002156:	47          	.byte	0x47
 8002157:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002158:	6800      	ldr	r0, [r0, #0]
 800215a:	f7ff fdad 	bl	8001cb8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	6993      	ldr	r3, [r2, #24]
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	6993      	ldr	r3, [r2, #24]
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	6993      	ldr	r3, [r2, #24]
 8002176:	6929      	ldr	r1, [r5, #16]
 8002178:	430b      	orrs	r3, r1
 800217a:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800217c:	2301      	movs	r3, #1
 800217e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002182:	2000      	movs	r0, #0
 8002184:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002188:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800218a:	6800      	ldr	r0, [r0, #0]
 800218c:	f7ff ff94 	bl	80020b8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	6993      	ldr	r3, [r2, #24]
 8002194:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002198:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	6993      	ldr	r3, [r2, #24]
 800219e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021a2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a4:	6822      	ldr	r2, [r4, #0]
 80021a6:	6993      	ldr	r3, [r2, #24]
 80021a8:	6929      	ldr	r1, [r5, #16]
 80021aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021ae:	6193      	str	r3, [r2, #24]
    break;
 80021b0:	e7e4      	b.n	800217c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021b2:	6800      	ldr	r0, [r0, #0]
 80021b4:	f7ff fdb2 	bl	8001d1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021b8:	6822      	ldr	r2, [r4, #0]
 80021ba:	69d3      	ldr	r3, [r2, #28]
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	69d3      	ldr	r3, [r2, #28]
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80021cc:	6822      	ldr	r2, [r4, #0]
 80021ce:	69d3      	ldr	r3, [r2, #28]
 80021d0:	6929      	ldr	r1, [r5, #16]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	61d3      	str	r3, [r2, #28]
    break;
 80021d6:	e7d1      	b.n	800217c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021d8:	6800      	ldr	r0, [r0, #0]
 80021da:	f7ff fdd5 	bl	8001d88 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	69d3      	ldr	r3, [r2, #28]
 80021e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	69d3      	ldr	r3, [r2, #28]
 80021ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021f2:	6822      	ldr	r2, [r4, #0]
 80021f4:	69d3      	ldr	r3, [r2, #28]
 80021f6:	6929      	ldr	r1, [r5, #16]
 80021f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021fc:	61d3      	str	r3, [r2, #28]
    break;
 80021fe:	e7bd      	b.n	800217c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002200:	2002      	movs	r0, #2
}
 8002202:	bd38      	pop	{r3, r4, r5, pc}

08002204 <TIM_CCxChannelCmd>:
{
 8002204:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 8002206:	2301      	movs	r3, #1
 8002208:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 800220c:	6a03      	ldr	r3, [r0, #32]
 800220e:	ea23 0304 	bic.w	r3, r3, r4
 8002212:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002214:	6a03      	ldr	r3, [r0, #32]
 8002216:	408a      	lsls	r2, r1
 8002218:	4313      	orrs	r3, r2
 800221a:	6203      	str	r3, [r0, #32]
}
 800221c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_TIM_PWM_Start_IT>:
{
 8002224:	b510      	push	{r4, lr}
 8002226:	4604      	mov	r4, r0
  switch (Channel)
 8002228:	290c      	cmp	r1, #12
 800222a:	d80d      	bhi.n	8002248 <HAL_TIM_PWM_Start_IT+0x24>
 800222c:	e8df f001 	tbb	[pc, r1]
 8002230:	0c0c0c07 	.word	0x0c0c0c07
 8002234:	0c0c0c25 	.word	0x0c0c0c25
 8002238:	0c0c0c2b 	.word	0x0c0c0c2b
 800223c:	31          	.byte	0x31
 800223d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800223e:	6802      	ldr	r2, [r0, #0]
 8002240:	68d3      	ldr	r3, [r2, #12]
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002248:	2201      	movs	r2, #1
 800224a:	6820      	ldr	r0, [r4, #0]
 800224c:	f7ff ffda 	bl	8002204 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_TIM_PWM_Start_IT+0x84>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d024      	beq.n	80022a2 <HAL_TIM_PWM_Start_IT+0x7e>
 8002258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800225c:	4293      	cmp	r3, r2
 800225e:	d01e      	beq.n	800229e <HAL_TIM_PWM_Start_IT+0x7a>
 8002260:	2200      	movs	r2, #0
 8002262:	b11a      	cbz	r2, 800226c <HAL_TIM_PWM_Start_IT+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 8002264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800226c:	6822      	ldr	r2, [r4, #0]
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6013      	str	r3, [r2, #0]
} 
 8002276:	2000      	movs	r0, #0
 8002278:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800227a:	6802      	ldr	r2, [r0, #0]
 800227c:	68d3      	ldr	r3, [r2, #12]
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	60d3      	str	r3, [r2, #12]
    break;
 8002284:	e7e0      	b.n	8002248 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002286:	6802      	ldr	r2, [r0, #0]
 8002288:	68d3      	ldr	r3, [r2, #12]
 800228a:	f043 0308 	orr.w	r3, r3, #8
 800228e:	60d3      	str	r3, [r2, #12]
    break;
 8002290:	e7da      	b.n	8002248 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002292:	6802      	ldr	r2, [r0, #0]
 8002294:	68d3      	ldr	r3, [r2, #12]
 8002296:	f043 0310 	orr.w	r3, r3, #16
 800229a:	60d3      	str	r3, [r2, #12]
    break;
 800229c:	e7d4      	b.n	8002248 <HAL_TIM_PWM_Start_IT+0x24>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800229e:	2201      	movs	r2, #1
 80022a0:	e7df      	b.n	8002262 <HAL_TIM_PWM_Start_IT+0x3e>
 80022a2:	2201      	movs	r2, #1
 80022a4:	e7dd      	b.n	8002262 <HAL_TIM_PWM_Start_IT+0x3e>
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000

080022ac <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80022ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d022      	beq.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80022b4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022c2:	6804      	ldr	r4, [r0, #0]
 80022c4:	6863      	ldr	r3, [r4, #4]
 80022c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ca:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80022cc:	6804      	ldr	r4, [r0, #0]
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	680d      	ldr	r5, [r1, #0]
 80022d2:	432b      	orrs	r3, r5
 80022d4:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022d6:	6804      	ldr	r4, [r0, #0]
 80022d8:	68a3      	ldr	r3, [r4, #8]
 80022da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022de:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022e0:	6804      	ldr	r4, [r0, #0]
 80022e2:	68a3      	ldr	r3, [r4, #8]
 80022e4:	6849      	ldr	r1, [r1, #4]
 80022e6:	430b      	orrs	r3, r1
 80022e8:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80022ea:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80022ee:	2300      	movs	r3, #0
 80022f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 80022f4:	4618      	mov	r0, r3
} 
 80022f6:	bc30      	pop	{r4, r5}
 80022f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022fa:	2002      	movs	r0, #2
 80022fc:	4770      	bx	lr

080022fe <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80022fe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002302:	2b01      	cmp	r3, #1
 8002304:	d01d      	beq.n	8002342 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
{
 8002306:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002308:	2401      	movs	r4, #1
 800230a:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8002314:	6802      	ldr	r2, [r0, #0]
 8002316:	680b      	ldr	r3, [r1, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8002318:	684d      	ldr	r5, [r1, #4]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 800231a:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->LockLevel        |
 800231c:	688d      	ldr	r5, [r1, #8]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 800231e:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->DeadTime         |
 8002320:	68cd      	ldr	r5, [r1, #12]
                                   sBreakDeadTimeConfig->LockLevel        |
 8002322:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->BreakState       |
 8002324:	690d      	ldr	r5, [r1, #16]
                                   sBreakDeadTimeConfig->DeadTime         |
 8002326:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8002328:	694d      	ldr	r5, [r1, #20]
                                   sBreakDeadTimeConfig->BreakState       |
 800232a:	432b      	orrs	r3, r5
                                   sBreakDeadTimeConfig->AutomaticOutput;
 800232c:	6989      	ldr	r1, [r1, #24]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 800232e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  | 
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
  
                                   
  htim->State = HAL_TIM_STATE_READY;                                 
 8002332:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002336:	2300      	movs	r3, #0
 8002338:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800233c:	4618      	mov	r0, r3
}
 800233e:	bc30      	pop	{r4, r5}
 8002340:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002342:	2002      	movs	r0, #2
 8002344:	4770      	bx	lr

08002346 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002346:	4770      	bx	lr

08002348 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002348:	4770      	bx	lr

0800234a <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800234a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b21      	cmp	r3, #33	; 0x21
 8002352:	d001      	beq.n	8002358 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002354:	2002      	movs	r0, #2
 8002356:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002358:	6883      	ldr	r3, [r0, #8]
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d016      	beq.n	800238e <UART_Transmit_IT+0x44>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8002360:	6802      	ldr	r2, [r0, #0]
 8002362:	6a03      	ldr	r3, [r0, #32]
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	6201      	str	r1, [r0, #32]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 800236c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002374:	b9db      	cbnz	r3, 80023ae <UART_Transmit_IT+0x64>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002376:	6802      	ldr	r2, [r0, #0]
 8002378:	68d3      	ldr	r3, [r2, #12]
 800237a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800237e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002380:	6802      	ldr	r2, [r0, #0]
 8002382:	68d3      	ldr	r3, [r2, #12]
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800238a:	2000      	movs	r0, #0
 800238c:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800238e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002398:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800239a:	6903      	ldr	r3, [r0, #16]
 800239c:	b91b      	cbnz	r3, 80023a6 <UART_Transmit_IT+0x5c>
        huart->pTxBuffPtr += 2U;
 800239e:	6a03      	ldr	r3, [r0, #32]
 80023a0:	3302      	adds	r3, #2
 80023a2:	6203      	str	r3, [r0, #32]
 80023a4:	e7e2      	b.n	800236c <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 80023a6:	6a03      	ldr	r3, [r0, #32]
 80023a8:	3301      	adds	r3, #1
 80023aa:	6203      	str	r3, [r0, #32]
 80023ac:	e7de      	b.n	800236c <UART_Transmit_IT+0x22>
    return HAL_OK;
 80023ae:	2000      	movs	r0, #0
  }
}
 80023b0:	4770      	bx	lr
	...

080023b4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b8:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80023ba:	6802      	ldr	r2, [r0, #0]
 80023bc:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80023be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80023c2:	68c1      	ldr	r1, [r0, #12]
 80023c4:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80023c6:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80023c8:	6801      	ldr	r1, [r0, #0]
 80023ca:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80023cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023d0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023d4:	6882      	ldr	r2, [r0, #8]
 80023d6:	6900      	ldr	r0, [r0, #16]
 80023d8:	4302      	orrs	r2, r0
 80023da:	6960      	ldr	r0, [r4, #20]
 80023dc:	4302      	orrs	r2, r0
 80023de:	69e0      	ldr	r0, [r4, #28]
 80023e0:	4302      	orrs	r2, r0
 80023e2:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 80023e4:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80023e6:	6822      	ldr	r2, [r4, #0]
 80023e8:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80023ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80023ee:	69a1      	ldr	r1, [r4, #24]
 80023f0:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 80023f2:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f4:	69e3      	ldr	r3, [r4, #28]
 80023f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fa:	d062      	beq.n	80024c2 <UART_SetConfig+0x10e>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80023fc:	f8d4 8000 	ldr.w	r8, [r4]
 8002400:	4bbb      	ldr	r3, [pc, #748]	; (80026f0 <UART_SetConfig+0x33c>)
 8002402:	4598      	cmp	r8, r3
 8002404:	f000 811b 	beq.w	800263e <UART_SetConfig+0x28a>
 8002408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800240c:	4598      	cmp	r8, r3
 800240e:	f000 8116 	beq.w	800263e <UART_SetConfig+0x28a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002412:	f7ff fc25 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241e:	6865      	ldr	r5, [r4, #4]
 8002420:	00ad      	lsls	r5, r5, #2
 8002422:	fbb0 f5f5 	udiv	r5, r0, r5
 8002426:	4fb3      	ldr	r7, [pc, #716]	; (80026f4 <UART_SetConfig+0x340>)
 8002428:	fba7 3505 	umull	r3, r5, r7, r5
 800242c:	096d      	lsrs	r5, r5, #5
 800242e:	012e      	lsls	r6, r5, #4
 8002430:	f7ff fc16 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002434:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002438:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800243c:	6865      	ldr	r5, [r4, #4]
 800243e:	00ad      	lsls	r5, r5, #2
 8002440:	fbb0 faf5 	udiv	sl, r0, r5
 8002444:	f7ff fc0c 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800244c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002450:	6865      	ldr	r5, [r4, #4]
 8002452:	00ad      	lsls	r5, r5, #2
 8002454:	fbb0 f5f5 	udiv	r5, r0, r5
 8002458:	fba7 3505 	umull	r3, r5, r7, r5
 800245c:	096d      	lsrs	r5, r5, #5
 800245e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002462:	fb09 a515 	mls	r5, r9, r5, sl
 8002466:	012d      	lsls	r5, r5, #4
 8002468:	3532      	adds	r5, #50	; 0x32
 800246a:	fba7 3505 	umull	r3, r5, r7, r5
 800246e:	096d      	lsrs	r5, r5, #5
 8002470:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002474:	4435      	add	r5, r6
 8002476:	f7ff fbf3 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 800247a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800247e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002482:	6866      	ldr	r6, [r4, #4]
 8002484:	00b6      	lsls	r6, r6, #2
 8002486:	fbb0 f6f6 	udiv	r6, r0, r6
 800248a:	f7ff fbe9 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 800248e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fbb0 f0f3 	udiv	r0, r0, r3
 800249e:	fba7 3000 	umull	r3, r0, r7, r0
 80024a2:	0940      	lsrs	r0, r0, #5
 80024a4:	fb09 6910 	mls	r9, r9, r0, r6
 80024a8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80024ac:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80024b0:	fba7 3709 	umull	r3, r7, r7, r9
 80024b4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80024b8:	442f      	add	r7, r5
 80024ba:	f8c8 7008 	str.w	r7, [r8, #8]
 80024be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80024c2:	f8d4 8000 	ldr.w	r8, [r4]
 80024c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024ca:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80024ce:	4598      	cmp	r8, r3
 80024d0:	d05c      	beq.n	800258c <UART_SetConfig+0x1d8>
 80024d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d6:	4598      	cmp	r8, r3
 80024d8:	d058      	beq.n	800258c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024da:	f7ff fbc1 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80024de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024e6:	6865      	ldr	r5, [r4, #4]
 80024e8:	006d      	lsls	r5, r5, #1
 80024ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80024ee:	4f81      	ldr	r7, [pc, #516]	; (80026f4 <UART_SetConfig+0x340>)
 80024f0:	fba7 3505 	umull	r3, r5, r7, r5
 80024f4:	096d      	lsrs	r5, r5, #5
 80024f6:	012e      	lsls	r6, r5, #4
 80024f8:	f7ff fbb2 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 80024fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002504:	6865      	ldr	r5, [r4, #4]
 8002506:	006d      	lsls	r5, r5, #1
 8002508:	fbb0 faf5 	udiv	sl, r0, r5
 800250c:	f7ff fba8 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002514:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002518:	6865      	ldr	r5, [r4, #4]
 800251a:	006d      	lsls	r5, r5, #1
 800251c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002520:	fba7 3505 	umull	r3, r5, r7, r5
 8002524:	096d      	lsrs	r5, r5, #5
 8002526:	f04f 0964 	mov.w	r9, #100	; 0x64
 800252a:	fb09 a515 	mls	r5, r9, r5, sl
 800252e:	00ed      	lsls	r5, r5, #3
 8002530:	3532      	adds	r5, #50	; 0x32
 8002532:	fba7 3505 	umull	r3, r5, r7, r5
 8002536:	096d      	lsrs	r5, r5, #5
 8002538:	006d      	lsls	r5, r5, #1
 800253a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800253e:	4435      	add	r5, r6
 8002540:	f7ff fb8e 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800254c:	6866      	ldr	r6, [r4, #4]
 800254e:	0076      	lsls	r6, r6, #1
 8002550:	fbb0 f6f6 	udiv	r6, r0, r6
 8002554:	f7ff fb84 	bl	8001c60 <HAL_RCC_GetPCLK1Freq>
 8002558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800255c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002560:	6863      	ldr	r3, [r4, #4]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fbb0 f3f3 	udiv	r3, r0, r3
 8002568:	fba7 2303 	umull	r2, r3, r7, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	fb09 6913 	mls	r9, r9, r3, r6
 8002572:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002576:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800257a:	fba7 3709 	umull	r3, r7, r7, r9
 800257e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002582:	442f      	add	r7, r5
 8002584:	f8c8 7008 	str.w	r7, [r8, #8]
 8002588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800258c:	f7ff fb7e 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002590:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002594:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002598:	6865      	ldr	r5, [r4, #4]
 800259a:	006d      	lsls	r5, r5, #1
 800259c:	fbb0 f5f5 	udiv	r5, r0, r5
 80025a0:	4f54      	ldr	r7, [pc, #336]	; (80026f4 <UART_SetConfig+0x340>)
 80025a2:	fba7 3505 	umull	r3, r5, r7, r5
 80025a6:	096d      	lsrs	r5, r5, #5
 80025a8:	012e      	lsls	r6, r5, #4
 80025aa:	f7ff fb6f 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 80025ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025b6:	6865      	ldr	r5, [r4, #4]
 80025b8:	006d      	lsls	r5, r5, #1
 80025ba:	fbb0 faf5 	udiv	sl, r0, r5
 80025be:	f7ff fb65 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 80025c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ca:	6865      	ldr	r5, [r4, #4]
 80025cc:	006d      	lsls	r5, r5, #1
 80025ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80025d2:	fba7 3505 	umull	r3, r5, r7, r5
 80025d6:	096d      	lsrs	r5, r5, #5
 80025d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80025dc:	fb09 a515 	mls	r5, r9, r5, sl
 80025e0:	00ed      	lsls	r5, r5, #3
 80025e2:	3532      	adds	r5, #50	; 0x32
 80025e4:	fba7 3505 	umull	r3, r5, r7, r5
 80025e8:	096d      	lsrs	r5, r5, #5
 80025ea:	006d      	lsls	r5, r5, #1
 80025ec:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80025f0:	4435      	add	r5, r6
 80025f2:	f7ff fb4b 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 80025f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025fe:	6866      	ldr	r6, [r4, #4]
 8002600:	0076      	lsls	r6, r6, #1
 8002602:	fbb0 f6f6 	udiv	r6, r0, r6
 8002606:	f7ff fb41 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 800260a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800260e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002612:	6863      	ldr	r3, [r4, #4]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	fba7 2303 	umull	r2, r3, r7, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	fb09 6913 	mls	r9, r9, r3, r6
 8002624:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002628:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800262c:	fba7 3709 	umull	r3, r7, r7, r9
 8002630:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002634:	442f      	add	r7, r5
 8002636:	f8c8 7008 	str.w	r7, [r8, #8]
 800263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800263e:	f7ff fb25 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002642:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002646:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800264a:	6865      	ldr	r5, [r4, #4]
 800264c:	00ad      	lsls	r5, r5, #2
 800264e:	fbb0 f5f5 	udiv	r5, r0, r5
 8002652:	4f28      	ldr	r7, [pc, #160]	; (80026f4 <UART_SetConfig+0x340>)
 8002654:	fba7 3505 	umull	r3, r5, r7, r5
 8002658:	096d      	lsrs	r5, r5, #5
 800265a:	012e      	lsls	r6, r5, #4
 800265c:	f7ff fb16 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002660:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002664:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002668:	6865      	ldr	r5, [r4, #4]
 800266a:	00ad      	lsls	r5, r5, #2
 800266c:	fbb0 faf5 	udiv	sl, r0, r5
 8002670:	f7ff fb0c 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8002674:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002678:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800267c:	6865      	ldr	r5, [r4, #4]
 800267e:	00ad      	lsls	r5, r5, #2
 8002680:	fbb0 f5f5 	udiv	r5, r0, r5
 8002684:	fba7 3505 	umull	r3, r5, r7, r5
 8002688:	096d      	lsrs	r5, r5, #5
 800268a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800268e:	fb09 a515 	mls	r5, r9, r5, sl
 8002692:	012d      	lsls	r5, r5, #4
 8002694:	3532      	adds	r5, #50	; 0x32
 8002696:	fba7 3505 	umull	r3, r5, r7, r5
 800269a:	096d      	lsrs	r5, r5, #5
 800269c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80026a0:	4435      	add	r5, r6
 80026a2:	f7ff faf3 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 80026a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ae:	6866      	ldr	r6, [r4, #4]
 80026b0:	00b6      	lsls	r6, r6, #2
 80026b2:	fbb0 f6f6 	udiv	r6, r0, r6
 80026b6:	f7ff fae9 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 80026ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026c2:	6863      	ldr	r3, [r4, #4]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	fba7 2303 	umull	r2, r3, r7, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	fb09 6913 	mls	r9, r9, r3, r6
 80026d4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80026d8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80026dc:	fba7 3709 	umull	r3, r7, r7, r9
 80026e0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80026e4:	442f      	add	r7, r5
 80026e6:	f8c8 7008 	str.w	r7, [r8, #8]
 80026ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ee:	bf00      	nop
 80026f0:	40011000 	.word	0x40011000
 80026f4:	51eb851f 	.word	0x51eb851f

080026f8 <UART_WaitOnFlagUntilTimeout>:
{
 80026f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fc:	4605      	mov	r5, r0
 80026fe:	460e      	mov	r6, r1
 8002700:	4690      	mov	r8, r2
 8002702:	461c      	mov	r4, r3
  tickstart = HAL_GetTick();
 8002704:	f7fe fd46 	bl	8001194 <HAL_GetTick>
 8002708:	4607      	mov	r7, r0
  if(Status == RESET)
 800270a:	f1b8 0f00 	cmp.w	r8, #0
 800270e:	d02c      	beq.n	800276a <UART_WaitOnFlagUntilTimeout+0x72>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	ea36 0303 	bics.w	r3, r6, r3
 8002718:	d157      	bne.n	80027ca <UART_WaitOnFlagUntilTimeout+0xd2>
      if(Timeout != HAL_MAX_DELAY)
 800271a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800271e:	d0f7      	beq.n	8002710 <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002720:	b124      	cbz	r4, 800272c <UART_WaitOnFlagUntilTimeout+0x34>
 8002722:	f7fe fd37 	bl	8001194 <HAL_GetTick>
 8002726:	1bc0      	subs	r0, r0, r7
 8002728:	4284      	cmp	r4, r0
 800272a:	d2f1      	bcs.n	8002710 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800272c:	682a      	ldr	r2, [r5, #0]
 800272e:	68d3      	ldr	r3, [r2, #12]
 8002730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002734:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002736:	682a      	ldr	r2, [r5, #0]
 8002738:	68d3      	ldr	r3, [r2, #12]
 800273a:	f023 0320 	bic.w	r3, r3, #32
 800273e:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002740:	682a      	ldr	r2, [r5, #0]
 8002742:	68d3      	ldr	r3, [r2, #12]
 8002744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002748:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800274a:	682a      	ldr	r2, [r5, #0]
 800274c:	6953      	ldr	r3, [r2, #20]
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6153      	str	r3, [r2, #20]
          huart->gState= HAL_UART_STATE_READY;
 8002754:	2320      	movs	r3, #32
 8002756:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	  	  huart->RxState= HAL_UART_STATE_READY;
 800275a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
          __HAL_UNLOCK(huart);
 800275e:	2300      	movs	r3, #0
 8002760:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
          return HAL_TIMEOUT;
 8002764:	2003      	movs	r0, #3
 8002766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800276a:	682b      	ldr	r3, [r5, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	ea36 0303 	bics.w	r3, r6, r3
 8002772:	d027      	beq.n	80027c4 <UART_WaitOnFlagUntilTimeout+0xcc>
      if(Timeout != HAL_MAX_DELAY)
 8002774:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002778:	d0f7      	beq.n	800276a <UART_WaitOnFlagUntilTimeout+0x72>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800277a:	b124      	cbz	r4, 8002786 <UART_WaitOnFlagUntilTimeout+0x8e>
 800277c:	f7fe fd0a 	bl	8001194 <HAL_GetTick>
 8002780:	1bc0      	subs	r0, r0, r7
 8002782:	4284      	cmp	r4, r0
 8002784:	d2f1      	bcs.n	800276a <UART_WaitOnFlagUntilTimeout+0x72>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002786:	682a      	ldr	r2, [r5, #0]
 8002788:	68d3      	ldr	r3, [r2, #12]
 800278a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800278e:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002790:	682a      	ldr	r2, [r5, #0]
 8002792:	68d3      	ldr	r3, [r2, #12]
 8002794:	f023 0320 	bic.w	r3, r3, #32
 8002798:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800279a:	682a      	ldr	r2, [r5, #0]
 800279c:	68d3      	ldr	r3, [r2, #12]
 800279e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a2:	60d3      	str	r3, [r2, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027a4:	682a      	ldr	r2, [r5, #0]
 80027a6:	6953      	ldr	r3, [r2, #20]
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6153      	str	r3, [r2, #20]
          huart->gState= HAL_UART_STATE_READY;
 80027ae:	2320      	movs	r3, #32
 80027b0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
	  	  huart->RxState= HAL_UART_STATE_READY;
 80027b4:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
          __HAL_UNLOCK(huart);
 80027b8:	2300      	movs	r3, #0
 80027ba:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
          return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80027c4:	2000      	movs	r0, #0
 80027c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ca:	2000      	movs	r0, #0
}
 80027cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027d0 <HAL_UART_Init>:
  if(huart == NULL)
 80027d0:	b358      	cbz	r0, 800282a <HAL_UART_Init+0x5a>
{
 80027d2:	b510      	push	{r4, lr}
 80027d4:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80027d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027da:	b30b      	cbz	r3, 8002820 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80027dc:	2324      	movs	r3, #36	; 0x24
 80027de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80027e2:	6822      	ldr	r2, [r4, #0]
 80027e4:	68d3      	ldr	r3, [r2, #12]
 80027e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fde1 	bl	80023b4 <UART_SetConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	6913      	ldr	r3, [r2, #16]
 80027f6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80027fa:	6113      	str	r3, [r2, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	6953      	ldr	r3, [r2, #20]
 8002800:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002804:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002806:	6822      	ldr	r2, [r4, #0]
 8002808:	68d3      	ldr	r3, [r2, #12]
 800280a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800280e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	2000      	movs	r0, #0
 8002812:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002814:	2320      	movs	r3, #32
 8002816:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800281a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800281e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002820:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002824:	f7fe fab2 	bl	8000d8c <HAL_UART_MspInit>
 8002828:	e7d8      	b.n	80027dc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	4770      	bx	lr

0800282e <HAL_UART_Transmit>:
{
 800282e:	b570      	push	{r4, r5, r6, lr}
 8002830:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002832:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	d002      	beq.n	8002842 <HAL_UART_Transmit+0x14>
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	4604      	mov	r4, r0
 8002844:	460d      	mov	r5, r1
    if((pData == NULL ) || (Size == 0U)) 
 8002846:	2900      	cmp	r1, #0
 8002848:	d04a      	beq.n	80028e0 <HAL_UART_Transmit+0xb2>
 800284a:	2a00      	cmp	r2, #0
 800284c:	d04a      	beq.n	80028e4 <HAL_UART_Transmit+0xb6>
    __HAL_LOCK(huart);
 800284e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002852:	2b01      	cmp	r3, #1
 8002854:	d048      	beq.n	80028e8 <HAL_UART_Transmit+0xba>
 8002856:	2301      	movs	r3, #1
 8002858:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	2300      	movs	r3, #0
 800285e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002860:	2321      	movs	r3, #33	; 0x21
 8002862:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    huart->TxXferSize = Size;
 8002866:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002868:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800286a:	e016      	b.n	800289a <HAL_UART_Transmit+0x6c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800286c:	4633      	mov	r3, r6
 800286e:	2200      	movs	r2, #0
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff ff40 	bl	80026f8 <UART_WaitOnFlagUntilTimeout>
 8002878:	2800      	cmp	r0, #0
 800287a:	d137      	bne.n	80028ec <HAL_UART_Transmit+0xbe>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	882b      	ldrh	r3, [r5, #0]
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002886:	6923      	ldr	r3, [r4, #16]
 8002888:	b90b      	cbnz	r3, 800288e <HAL_UART_Transmit+0x60>
          pData +=2U;
 800288a:	3502      	adds	r5, #2
 800288c:	e005      	b.n	800289a <HAL_UART_Transmit+0x6c>
          pData +=1U;
 800288e:	3501      	adds	r5, #1
 8002890:	e003      	b.n	800289a <HAL_UART_Transmit+0x6c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	782a      	ldrb	r2, [r5, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 800289a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800289c:	b17b      	cbz	r3, 80028be <HAL_UART_Transmit+0x90>
      huart->TxXferCount--;
 800289e:	3b01      	subs	r3, #1
 80028a0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028a2:	68a3      	ldr	r3, [r4, #8]
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d0e0      	beq.n	800286c <HAL_UART_Transmit+0x3e>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80028aa:	4633      	mov	r3, r6
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff ff21 	bl	80026f8 <UART_WaitOnFlagUntilTimeout>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d0eb      	beq.n	8002892 <HAL_UART_Transmit+0x64>
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e7bf      	b.n	800283e <HAL_UART_Transmit+0x10>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80028be:	4633      	mov	r3, r6
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff ff17 	bl	80026f8 <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b108      	cbz	r0, 80028d2 <HAL_UART_Transmit+0xa4>
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e7b5      	b.n	800283e <HAL_UART_Transmit+0x10>
      huart->gState = HAL_UART_STATE_READY;
 80028d2:	2220      	movs	r2, #32
 80028d4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80028d8:	2200      	movs	r2, #0
 80028da:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80028de:	e7ae      	b.n	800283e <HAL_UART_Transmit+0x10>
      return  HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e7ac      	b.n	800283e <HAL_UART_Transmit+0x10>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e7aa      	b.n	800283e <HAL_UART_Transmit+0x10>
    __HAL_LOCK(huart);
 80028e8:	2302      	movs	r3, #2
 80028ea:	e7a8      	b.n	800283e <HAL_UART_Transmit+0x10>
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e7a6      	b.n	800283e <HAL_UART_Transmit+0x10>

080028f0 <HAL_UART_Receive>:
{ 
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 80028f4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d001      	beq.n	8002902 <HAL_UART_Receive+0x12>
    return HAL_BUSY;   
 80028fe:	2002      	movs	r0, #2
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	4604      	mov	r4, r0
 8002904:	460d      	mov	r5, r1
    if((pData == NULL ) || (Size == 0U)) 
 8002906:	2900      	cmp	r1, #0
 8002908:	d04b      	beq.n	80029a2 <HAL_UART_Receive+0xb2>
 800290a:	2a00      	cmp	r2, #0
 800290c:	d04b      	beq.n	80029a6 <HAL_UART_Receive+0xb6>
    __HAL_LOCK(huart);
 800290e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002912:	2b01      	cmp	r3, #1
 8002914:	d049      	beq.n	80029aa <HAL_UART_Receive+0xba>
 8002916:	2301      	movs	r3, #1
 8002918:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291c:	2300      	movs	r3, #0
 800291e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002920:	2322      	movs	r3, #34	; 0x22
 8002922:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    huart->RxXferSize = Size; 
 8002926:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002928:	85c2      	strh	r2, [r0, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 800292a:	e01c      	b.n	8002966 <HAL_UART_Receive+0x76>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800292c:	4633      	mov	r3, r6
 800292e:	2200      	movs	r2, #0
 8002930:	2120      	movs	r1, #32
 8002932:	4620      	mov	r0, r4
 8002934:	f7ff fee0 	bl	80026f8 <UART_WaitOnFlagUntilTimeout>
 8002938:	2800      	cmp	r0, #0
 800293a:	d138      	bne.n	80029ae <HAL_UART_Receive+0xbe>
        if(huart->Init.Parity == UART_PARITY_NONE)
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	b933      	cbnz	r3, 800294e <HAL_UART_Receive+0x5e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	f825 3b02 	strh.w	r3, [r5], #2
 800294c:	e00b      	b.n	8002966 <HAL_UART_Receive+0x76>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f825 3b01 	strh.w	r3, [r5], #1
 8002958:	e005      	b.n	8002966 <HAL_UART_Receive+0x76>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002962:	702b      	strb	r3, [r5, #0]
 8002964:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 8002966:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002968:	b1a3      	cbz	r3, 8002994 <HAL_UART_Receive+0xa4>
      huart->RxXferCount--;
 800296a:	3b01      	subs	r3, #1
 800296c:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800296e:	68a3      	ldr	r3, [r4, #8]
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002974:	d0da      	beq.n	800292c <HAL_UART_Receive+0x3c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8002976:	4633      	mov	r3, r6
 8002978:	2200      	movs	r2, #0
 800297a:	2120      	movs	r1, #32
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff febb 	bl	80026f8 <UART_WaitOnFlagUntilTimeout>
 8002982:	b9b0      	cbnz	r0, 80029b2 <HAL_UART_Receive+0xc2>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002984:	6923      	ldr	r3, [r4, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e7      	bne.n	800295a <HAL_UART_Receive+0x6a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	702b      	strb	r3, [r5, #0]
 8002990:	3501      	adds	r5, #1
 8002992:	e7e8      	b.n	8002966 <HAL_UART_Receive+0x76>
    huart->RxState = HAL_UART_STATE_READY;
 8002994:	2320      	movs	r3, #32
 8002996:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800299a:	2000      	movs	r0, #0
 800299c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	2001      	movs	r0, #1
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(huart);
 80029aa:	2002      	movs	r0, #2
 80029ac:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_TIMEOUT;
 80029ae:	2003      	movs	r0, #3
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_TIMEOUT;
 80029b2:	2003      	movs	r0, #3
}
 80029b4:	bd70      	pop	{r4, r5, r6, pc}

080029b6 <HAL_UART_TxCpltCallback>:
{
 80029b6:	4770      	bx	lr

080029b8 <UART_EndTransmit_IT>:
{
 80029b8:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029ba:	6801      	ldr	r1, [r0, #0]
 80029bc:	68cb      	ldr	r3, [r1, #12]
 80029be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c2:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80029c4:	2320      	movs	r3, #32
 80029c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80029ca:	f7ff fff4 	bl	80029b6 <HAL_UART_TxCpltCallback>
}
 80029ce:	2000      	movs	r0, #0
 80029d0:	bd08      	pop	{r3, pc}

080029d2 <HAL_UART_RxCpltCallback>:
{
 80029d2:	4770      	bx	lr

080029d4 <UART_Receive_IT>:
{
 80029d4:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80029d6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b22      	cmp	r3, #34	; 0x22
 80029de:	d001      	beq.n	80029e4 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 80029e0:	2002      	movs	r0, #2
 80029e2:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029e4:	6883      	ldr	r3, [r0, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d00e      	beq.n	8002a0a <UART_Receive_IT+0x36>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80029ec:	6903      	ldr	r3, [r0, #16]
 80029ee:	bb03      	cbnz	r3, 8002a32 <UART_Receive_IT+0x5e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 80029f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	6282      	str	r2, [r0, #40]	; 0x28
 80029f6:	6802      	ldr	r2, [r0, #0]
 80029f8:	6852      	ldr	r2, [r2, #4]
 80029fa:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 80029fc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002a04:	b1f3      	cbz	r3, 8002a44 <UART_Receive_IT+0x70>
    return HAL_OK;
 8002a06:	2000      	movs	r0, #0
}
 8002a08:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002a0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a0c:	6903      	ldr	r3, [r0, #16]
 8002a0e:	b943      	cbnz	r3, 8002a22 <UART_Receive_IT+0x4e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002a1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	6283      	str	r3, [r0, #40]	; 0x28
 8002a20:	e7ec      	b.n	80029fc <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002a2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	6283      	str	r3, [r0, #40]	; 0x28
 8002a30:	e7e4      	b.n	80029fc <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8002a32:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002a34:	1c53      	adds	r3, r2, #1
 8002a36:	6283      	str	r3, [r0, #40]	; 0x28
 8002a38:	6803      	ldr	r3, [r0, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a40:	7013      	strb	r3, [r2, #0]
 8002a42:	e7db      	b.n	80029fc <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a44:	6802      	ldr	r2, [r0, #0]
 8002a46:	68d3      	ldr	r3, [r2, #12]
 8002a48:	f023 0320 	bic.w	r3, r3, #32
 8002a4c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a4e:	6802      	ldr	r2, [r0, #0]
 8002a50:	68d3      	ldr	r3, [r2, #12]
 8002a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a56:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a58:	6802      	ldr	r2, [r0, #0]
 8002a5a:	6953      	ldr	r3, [r2, #20]
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a62:	2320      	movs	r3, #32
 8002a64:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a68:	f7ff ffb3 	bl	80029d2 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	bd08      	pop	{r3, pc}

08002a70 <HAL_UART_ErrorCallback>:
{
 8002a70:	4770      	bx	lr

08002a72 <HAL_UART_IRQHandler>:
{
 8002a72:	b510      	push	{r4, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	4604      	mov	r4, r0
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8002a78:	6803      	ldr	r3, [r0, #0]
 8002a7a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8002a7c:	68da      	ldr	r2, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002a7e:	f011 0f01 	tst.w	r1, #1
 8002a82:	d00d      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x2e>
 8002a84:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002a88:	b152      	cbz	r2, 8002aa0 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	9200      	str	r2, [sp, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	9200      	str	r2, [sp, #0]
 8002a96:	9a00      	ldr	r2, [sp, #0]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	63c2      	str	r2, [r0, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8002aa0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	f002 0201 	and.w	r2, r2, #1
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002aa8:	f011 0f02 	tst.w	r1, #2
 8002aac:	d00b      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x54>
 8002aae:	b152      	cbz	r2, 8002ac6 <HAL_UART_IRQHandler+0x54>
    __HAL_UART_CLEAR_FEFLAG(huart);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	9201      	str	r2, [sp, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	9201      	str	r2, [sp, #4]
 8002abc:	9a01      	ldr	r2, [sp, #4]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ac0:	f042 0204 	orr.w	r2, r2, #4
 8002ac4:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8002ac6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	f002 0201 	and.w	r2, r2, #1
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002ace:	f011 0f04 	tst.w	r1, #4
 8002ad2:	d00b      	beq.n	8002aec <HAL_UART_IRQHandler+0x7a>
 8002ad4:	b152      	cbz	r2, 8002aec <HAL_UART_IRQHandler+0x7a>
    __HAL_UART_CLEAR_NEFLAG(huart);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	9202      	str	r2, [sp, #8]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	9202      	str	r2, [sp, #8]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	9202      	str	r2, [sp, #8]
 8002ae2:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ae6:	f042 0202 	orr.w	r2, r2, #2
 8002aea:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8002aec:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	f002 0201 	and.w	r2, r2, #1
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002af4:	f011 0f08 	tst.w	r1, #8
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xa0>
 8002afa:	b152      	cbz	r2, 8002b12 <HAL_UART_IRQHandler+0xa0>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002afc:	2200      	movs	r2, #0
 8002afe:	9203      	str	r2, [sp, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	9203      	str	r2, [sp, #12]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	9a03      	ldr	r2, [sp, #12]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b0c:	f042 0208 	orr.w	r2, r2, #8
 8002b10:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002b12:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0320 	and.w	r3, r3, #32
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002b1a:	f012 0f20 	tst.w	r2, #32
 8002b1e:	d000      	beq.n	8002b22 <HAL_UART_IRQHandler+0xb0>
 8002b20:	b9ab      	cbnz	r3, 8002b4e <HAL_UART_IRQHandler+0xdc>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002b2c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002b30:	d000      	beq.n	8002b34 <HAL_UART_IRQHandler+0xc2>
 8002b32:	b983      	cbnz	r3, 8002b56 <HAL_UART_IRQHandler+0xe4>
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if((tmp1 != RESET) && (tmp2 != RESET))
 8002b3e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b42:	d000      	beq.n	8002b46 <HAL_UART_IRQHandler+0xd4>
 8002b44:	b95b      	cbnz	r3, 8002b5e <HAL_UART_IRQHandler+0xec>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b48:	b96b      	cbnz	r3, 8002b66 <HAL_UART_IRQHandler+0xf4>
}
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd10      	pop	{r4, pc}
    UART_Receive_IT(huart);
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff ff40 	bl	80029d4 <UART_Receive_IT>
 8002b54:	e7e5      	b.n	8002b22 <HAL_UART_IRQHandler+0xb0>
    UART_Transmit_IT(huart);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fbf7 	bl	800234a <UART_Transmit_IT>
 8002b5c:	e7ea      	b.n	8002b34 <HAL_UART_IRQHandler+0xc2>
    UART_EndTransmit_IT(huart);
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7ff ff2a 	bl	80029b8 <UART_EndTransmit_IT>
 8002b64:	e7ef      	b.n	8002b46 <HAL_UART_IRQHandler+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8002b66:	2320      	movs	r3, #32
 8002b68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_ErrorCallback(huart);
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff ff7d 	bl	8002a70 <HAL_UART_ErrorCallback>
}
 8002b76:	e7e8      	b.n	8002b4a <HAL_UART_IRQHandler+0xd8>

08002b78 <atoi>:
 8002b78:	220a      	movs	r2, #10
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	f000 b8a4 	b.w	8002cc8 <strtol>

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	4e0d      	ldr	r6, [pc, #52]	; (8002bb8 <__libc_init_array+0x38>)
 8002b84:	4c0d      	ldr	r4, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b86:	1ba4      	subs	r4, r4, r6
 8002b88:	10a4      	asrs	r4, r4, #2
 8002b8a:	2500      	movs	r5, #0
 8002b8c:	42a5      	cmp	r5, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	4e0b      	ldr	r6, [pc, #44]	; (8002bc0 <__libc_init_array+0x40>)
 8002b92:	4c0c      	ldr	r4, [pc, #48]	; (8002bc4 <__libc_init_array+0x44>)
 8002b94:	f000 fdf8 	bl	8003788 <_init>
 8002b98:	1ba4      	subs	r4, r4, r6
 8002b9a:	10a4      	asrs	r4, r4, #2
 8002b9c:	2500      	movs	r5, #0
 8002b9e:	42a5      	cmp	r5, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ba8:	4798      	blx	r3
 8002baa:	3501      	adds	r5, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bb2:	4798      	blx	r3
 8002bb4:	3501      	adds	r5, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	08003c94 	.word	0x08003c94
 8002bbc:	08003c94 	.word	0x08003c94
 8002bc0:	08003c94 	.word	0x08003c94
 8002bc4:	08003c98 	.word	0x08003c98

08002bc8 <_strtol_l.isra.0>:
 8002bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	4680      	mov	r8, r0
 8002bce:	4689      	mov	r9, r1
 8002bd0:	4692      	mov	sl, r2
 8002bd2:	461f      	mov	r7, r3
 8002bd4:	468b      	mov	fp, r1
 8002bd6:	465d      	mov	r5, fp
 8002bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002bde:	f000 f889 	bl	8002cf4 <__locale_ctype_ptr_l>
 8002be2:	4420      	add	r0, r4
 8002be4:	7846      	ldrb	r6, [r0, #1]
 8002be6:	f016 0608 	ands.w	r6, r6, #8
 8002bea:	d10b      	bne.n	8002c04 <_strtol_l.isra.0+0x3c>
 8002bec:	2c2d      	cmp	r4, #45	; 0x2d
 8002bee:	d10b      	bne.n	8002c08 <_strtol_l.isra.0+0x40>
 8002bf0:	782c      	ldrb	r4, [r5, #0]
 8002bf2:	2601      	movs	r6, #1
 8002bf4:	f10b 0502 	add.w	r5, fp, #2
 8002bf8:	b167      	cbz	r7, 8002c14 <_strtol_l.isra.0+0x4c>
 8002bfa:	2f10      	cmp	r7, #16
 8002bfc:	d114      	bne.n	8002c28 <_strtol_l.isra.0+0x60>
 8002bfe:	2c30      	cmp	r4, #48	; 0x30
 8002c00:	d00a      	beq.n	8002c18 <_strtol_l.isra.0+0x50>
 8002c02:	e011      	b.n	8002c28 <_strtol_l.isra.0+0x60>
 8002c04:	46ab      	mov	fp, r5
 8002c06:	e7e6      	b.n	8002bd6 <_strtol_l.isra.0+0xe>
 8002c08:	2c2b      	cmp	r4, #43	; 0x2b
 8002c0a:	bf04      	itt	eq
 8002c0c:	782c      	ldrbeq	r4, [r5, #0]
 8002c0e:	f10b 0502 	addeq.w	r5, fp, #2
 8002c12:	e7f1      	b.n	8002bf8 <_strtol_l.isra.0+0x30>
 8002c14:	2c30      	cmp	r4, #48	; 0x30
 8002c16:	d127      	bne.n	8002c68 <_strtol_l.isra.0+0xa0>
 8002c18:	782b      	ldrb	r3, [r5, #0]
 8002c1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002c1e:	2b58      	cmp	r3, #88	; 0x58
 8002c20:	d14b      	bne.n	8002cba <_strtol_l.isra.0+0xf2>
 8002c22:	786c      	ldrb	r4, [r5, #1]
 8002c24:	2710      	movs	r7, #16
 8002c26:	3502      	adds	r5, #2
 8002c28:	2e00      	cmp	r6, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002c30:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002c34:	2200      	movs	r2, #0
 8002c36:	fbb1 fef7 	udiv	lr, r1, r7
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002c40:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d811      	bhi.n	8002c6c <_strtol_l.isra.0+0xa4>
 8002c48:	461c      	mov	r4, r3
 8002c4a:	42a7      	cmp	r7, r4
 8002c4c:	dd1d      	ble.n	8002c8a <_strtol_l.isra.0+0xc2>
 8002c4e:	1c53      	adds	r3, r2, #1
 8002c50:	d007      	beq.n	8002c62 <_strtol_l.isra.0+0x9a>
 8002c52:	4586      	cmp	lr, r0
 8002c54:	d316      	bcc.n	8002c84 <_strtol_l.isra.0+0xbc>
 8002c56:	d101      	bne.n	8002c5c <_strtol_l.isra.0+0x94>
 8002c58:	45a4      	cmp	ip, r4
 8002c5a:	db13      	blt.n	8002c84 <_strtol_l.isra.0+0xbc>
 8002c5c:	fb00 4007 	mla	r0, r0, r7, r4
 8002c60:	2201      	movs	r2, #1
 8002c62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c66:	e7eb      	b.n	8002c40 <_strtol_l.isra.0+0x78>
 8002c68:	270a      	movs	r7, #10
 8002c6a:	e7dd      	b.n	8002c28 <_strtol_l.isra.0+0x60>
 8002c6c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002c70:	2b19      	cmp	r3, #25
 8002c72:	d801      	bhi.n	8002c78 <_strtol_l.isra.0+0xb0>
 8002c74:	3c37      	subs	r4, #55	; 0x37
 8002c76:	e7e8      	b.n	8002c4a <_strtol_l.isra.0+0x82>
 8002c78:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002c7c:	2b19      	cmp	r3, #25
 8002c7e:	d804      	bhi.n	8002c8a <_strtol_l.isra.0+0xc2>
 8002c80:	3c57      	subs	r4, #87	; 0x57
 8002c82:	e7e2      	b.n	8002c4a <_strtol_l.isra.0+0x82>
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	e7eb      	b.n	8002c62 <_strtol_l.isra.0+0x9a>
 8002c8a:	1c53      	adds	r3, r2, #1
 8002c8c:	d108      	bne.n	8002ca0 <_strtol_l.isra.0+0xd8>
 8002c8e:	2322      	movs	r3, #34	; 0x22
 8002c90:	f8c8 3000 	str.w	r3, [r8]
 8002c94:	4608      	mov	r0, r1
 8002c96:	f1ba 0f00 	cmp.w	sl, #0
 8002c9a:	d107      	bne.n	8002cac <_strtol_l.isra.0+0xe4>
 8002c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca0:	b106      	cbz	r6, 8002ca4 <_strtol_l.isra.0+0xdc>
 8002ca2:	4240      	negs	r0, r0
 8002ca4:	f1ba 0f00 	cmp.w	sl, #0
 8002ca8:	d00c      	beq.n	8002cc4 <_strtol_l.isra.0+0xfc>
 8002caa:	b122      	cbz	r2, 8002cb6 <_strtol_l.isra.0+0xee>
 8002cac:	3d01      	subs	r5, #1
 8002cae:	f8ca 5000 	str.w	r5, [sl]
 8002cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb6:	464d      	mov	r5, r9
 8002cb8:	e7f9      	b.n	8002cae <_strtol_l.isra.0+0xe6>
 8002cba:	2430      	movs	r4, #48	; 0x30
 8002cbc:	2f00      	cmp	r7, #0
 8002cbe:	d1b3      	bne.n	8002c28 <_strtol_l.isra.0+0x60>
 8002cc0:	2708      	movs	r7, #8
 8002cc2:	e7b1      	b.n	8002c28 <_strtol_l.isra.0+0x60>
 8002cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002cc8 <strtol>:
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <strtol+0x24>)
 8002cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ccc:	681c      	ldr	r4, [r3, #0]
 8002cce:	4d08      	ldr	r5, [pc, #32]	; (8002cf0 <strtol+0x28>)
 8002cd0:	6a23      	ldr	r3, [r4, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf08      	it	eq
 8002cd6:	462b      	moveq	r3, r5
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	460a      	mov	r2, r1
 8002cde:	4601      	mov	r1, r0
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7ff ff71 	bl	8002bc8 <_strtol_l.isra.0>
 8002ce6:	b003      	add	sp, #12
 8002ce8:	bd30      	pop	{r4, r5, pc}
 8002cea:	bf00      	nop
 8002cec:	2000000c 	.word	0x2000000c
 8002cf0:	20000070 	.word	0x20000070

08002cf4 <__locale_ctype_ptr_l>:
 8002cf4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002cf8:	4770      	bx	lr

08002cfa <__ascii_mbtowc>:
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	b901      	cbnz	r1, 8002d00 <__ascii_mbtowc+0x6>
 8002cfe:	a901      	add	r1, sp, #4
 8002d00:	b142      	cbz	r2, 8002d14 <__ascii_mbtowc+0x1a>
 8002d02:	b14b      	cbz	r3, 8002d18 <__ascii_mbtowc+0x1e>
 8002d04:	7813      	ldrb	r3, [r2, #0]
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	1c10      	adds	r0, r2, #0
 8002d0c:	bf18      	it	ne
 8002d0e:	2001      	movne	r0, #1
 8002d10:	b002      	add	sp, #8
 8002d12:	4770      	bx	lr
 8002d14:	4610      	mov	r0, r2
 8002d16:	e7fb      	b.n	8002d10 <__ascii_mbtowc+0x16>
 8002d18:	f06f 0001 	mvn.w	r0, #1
 8002d1c:	e7f8      	b.n	8002d10 <__ascii_mbtowc+0x16>

08002d1e <__ascii_wctomb>:
 8002d1e:	b149      	cbz	r1, 8002d34 <__ascii_wctomb+0x16>
 8002d20:	2aff      	cmp	r2, #255	; 0xff
 8002d22:	bf85      	ittet	hi
 8002d24:	238a      	movhi	r3, #138	; 0x8a
 8002d26:	6003      	strhi	r3, [r0, #0]
 8002d28:	700a      	strbls	r2, [r1, #0]
 8002d2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8002d2e:	bf98      	it	ls
 8002d30:	2001      	movls	r0, #1
 8002d32:	4770      	bx	lr
 8002d34:	4608      	mov	r0, r1
 8002d36:	4770      	bx	lr

08002d38 <sinf>:
 8002d38:	ee10 3a10 	vmov	r3, s0
 8002d3c:	b507      	push	{r0, r1, r2, lr}
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <sinf+0x7c>)
 8002d40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d44:	4293      	cmp	r3, r2
 8002d46:	dc05      	bgt.n	8002d54 <sinf+0x1c>
 8002d48:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002db8 <sinf+0x80>
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f000 fc1d 	bl	800358c <__kernel_sinf>
 8002d52:	e004      	b.n	8002d5e <sinf+0x26>
 8002d54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002d58:	db04      	blt.n	8002d64 <sinf+0x2c>
 8002d5a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002d5e:	b003      	add	sp, #12
 8002d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d64:	4668      	mov	r0, sp
 8002d66:	f000 f829 	bl	8002dbc <__ieee754_rem_pio2f>
 8002d6a:	f000 0003 	and.w	r0, r0, #3
 8002d6e:	2801      	cmp	r0, #1
 8002d70:	d008      	beq.n	8002d84 <sinf+0x4c>
 8002d72:	2802      	cmp	r0, #2
 8002d74:	d00d      	beq.n	8002d92 <sinf+0x5a>
 8002d76:	b9b0      	cbnz	r0, 8002da6 <sinf+0x6e>
 8002d78:	2001      	movs	r0, #1
 8002d7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8002d7e:	ed9d 0a00 	vldr	s0, [sp]
 8002d82:	e7e4      	b.n	8002d4e <sinf+0x16>
 8002d84:	eddd 0a01 	vldr	s1, [sp, #4]
 8002d88:	ed9d 0a00 	vldr	s0, [sp]
 8002d8c:	f000 f942 	bl	8003014 <__kernel_cosf>
 8002d90:	e7e5      	b.n	8002d5e <sinf+0x26>
 8002d92:	2001      	movs	r0, #1
 8002d94:	eddd 0a01 	vldr	s1, [sp, #4]
 8002d98:	ed9d 0a00 	vldr	s0, [sp]
 8002d9c:	f000 fbf6 	bl	800358c <__kernel_sinf>
 8002da0:	eeb1 0a40 	vneg.f32	s0, s0
 8002da4:	e7db      	b.n	8002d5e <sinf+0x26>
 8002da6:	eddd 0a01 	vldr	s1, [sp, #4]
 8002daa:	ed9d 0a00 	vldr	s0, [sp]
 8002dae:	f000 f931 	bl	8003014 <__kernel_cosf>
 8002db2:	e7f5      	b.n	8002da0 <sinf+0x68>
 8002db4:	3f490fd8 	.word	0x3f490fd8
 8002db8:	00000000 	.word	0x00000000

08002dbc <__ieee754_rem_pio2f>:
 8002dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dbe:	ee10 6a10 	vmov	r6, s0
 8002dc2:	4b86      	ldr	r3, [pc, #536]	; (8002fdc <__ieee754_rem_pio2f+0x220>)
 8002dc4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8002dc8:	429c      	cmp	r4, r3
 8002dca:	b087      	sub	sp, #28
 8002dcc:	4605      	mov	r5, r0
 8002dce:	dc05      	bgt.n	8002ddc <__ieee754_rem_pio2f+0x20>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	ed85 0a00 	vstr	s0, [r5]
 8002dd6:	6043      	str	r3, [r0, #4]
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e020      	b.n	8002e1e <__ieee754_rem_pio2f+0x62>
 8002ddc:	4b80      	ldr	r3, [pc, #512]	; (8002fe0 <__ieee754_rem_pio2f+0x224>)
 8002dde:	429c      	cmp	r4, r3
 8002de0:	dc38      	bgt.n	8002e54 <__ieee754_rem_pio2f+0x98>
 8002de2:	2e00      	cmp	r6, #0
 8002de4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002fe4 <__ieee754_rem_pio2f+0x228>
 8002de8:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <__ieee754_rem_pio2f+0x22c>)
 8002dea:	f024 040f 	bic.w	r4, r4, #15
 8002dee:	dd18      	ble.n	8002e22 <__ieee754_rem_pio2f+0x66>
 8002df0:	429c      	cmp	r4, r3
 8002df2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002df6:	bf09      	itett	eq
 8002df8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8002fec <__ieee754_rem_pio2f+0x230>
 8002dfc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8002ff0 <__ieee754_rem_pio2f+0x234>
 8002e00:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002e04:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8002ff4 <__ieee754_rem_pio2f+0x238>
 8002e08:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e10:	edc0 6a00 	vstr	s13, [r0]
 8002e14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e18:	edc0 7a01 	vstr	s15, [r0, #4]
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	b007      	add	sp, #28
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	429c      	cmp	r4, r3
 8002e24:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002e28:	bf09      	itett	eq
 8002e2a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8002fec <__ieee754_rem_pio2f+0x230>
 8002e2e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8002ff0 <__ieee754_rem_pio2f+0x234>
 8002e32:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002e36:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8002ff4 <__ieee754_rem_pio2f+0x238>
 8002e3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002e3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e42:	edc0 6a00 	vstr	s13, [r0]
 8002e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e4a:	edc0 7a01 	vstr	s15, [r0, #4]
 8002e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e52:	e7e4      	b.n	8002e1e <__ieee754_rem_pio2f+0x62>
 8002e54:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <__ieee754_rem_pio2f+0x23c>)
 8002e56:	429c      	cmp	r4, r3
 8002e58:	dc71      	bgt.n	8002f3e <__ieee754_rem_pio2f+0x182>
 8002e5a:	f000 fbdf 	bl	800361c <fabsf>
 8002e5e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002ffc <__ieee754_rem_pio2f+0x240>
 8002e62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002e66:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002e72:	ee17 0a90 	vmov	r0, s15
 8002e76:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002fe4 <__ieee754_rem_pio2f+0x228>
 8002e7a:	eeb1 7a46 	vneg.f32	s14, s12
 8002e7e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002e82:	281f      	cmp	r0, #31
 8002e84:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8002ff0 <__ieee754_rem_pio2f+0x234>
 8002e88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002e90:	ee16 3a90 	vmov	r3, s13
 8002e94:	dc1c      	bgt.n	8002ed0 <__ieee754_rem_pio2f+0x114>
 8002e96:	1e47      	subs	r7, r0, #1
 8002e98:	4959      	ldr	r1, [pc, #356]	; (8003000 <__ieee754_rem_pio2f+0x244>)
 8002e9a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002e9e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8002ea2:	428a      	cmp	r2, r1
 8002ea4:	d014      	beq.n	8002ed0 <__ieee754_rem_pio2f+0x114>
 8002ea6:	602b      	str	r3, [r5, #0]
 8002ea8:	ed95 7a00 	vldr	s14, [r5]
 8002eac:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002eb0:	2e00      	cmp	r6, #0
 8002eb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002eb6:	ed85 0a01 	vstr	s0, [r5, #4]
 8002eba:	dab0      	bge.n	8002e1e <__ieee754_rem_pio2f+0x62>
 8002ebc:	eeb1 7a47 	vneg.f32	s14, s14
 8002ec0:	eeb1 0a40 	vneg.f32	s0, s0
 8002ec4:	ed85 7a00 	vstr	s14, [r5]
 8002ec8:	ed85 0a01 	vstr	s0, [r5, #4]
 8002ecc:	4240      	negs	r0, r0
 8002ece:	e7a6      	b.n	8002e1e <__ieee754_rem_pio2f+0x62>
 8002ed0:	15e4      	asrs	r4, r4, #23
 8002ed2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002ed6:	1aa2      	subs	r2, r4, r2
 8002ed8:	2a08      	cmp	r2, #8
 8002eda:	dde4      	ble.n	8002ea6 <__ieee754_rem_pio2f+0xea>
 8002edc:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002fec <__ieee754_rem_pio2f+0x230>
 8002ee0:	eef0 6a40 	vmov.f32	s13, s0
 8002ee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002ee8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002eec:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002ef0:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002ff4 <__ieee754_rem_pio2f+0x238>
 8002ef4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8002ef8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8002efc:	eef0 7a40 	vmov.f32	s15, s0
 8002f00:	ee15 3a90 	vmov	r3, s11
 8002f04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002f08:	1aa4      	subs	r4, r4, r2
 8002f0a:	2c19      	cmp	r4, #25
 8002f0c:	dc04      	bgt.n	8002f18 <__ieee754_rem_pio2f+0x15c>
 8002f0e:	edc5 5a00 	vstr	s11, [r5]
 8002f12:	eeb0 0a66 	vmov.f32	s0, s13
 8002f16:	e7c7      	b.n	8002ea8 <__ieee754_rem_pio2f+0xec>
 8002f18:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8003004 <__ieee754_rem_pio2f+0x248>
 8002f1c:	eeb0 0a66 	vmov.f32	s0, s13
 8002f20:	eea7 0a25 	vfma.f32	s0, s14, s11
 8002f24:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002f28:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002f2c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003008 <__ieee754_rem_pio2f+0x24c>
 8002f30:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8002f34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002f38:	ed85 7a00 	vstr	s14, [r5]
 8002f3c:	e7b4      	b.n	8002ea8 <__ieee754_rem_pio2f+0xec>
 8002f3e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002f42:	db06      	blt.n	8002f52 <__ieee754_rem_pio2f+0x196>
 8002f44:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002f48:	edc0 7a01 	vstr	s15, [r0, #4]
 8002f4c:	edc0 7a00 	vstr	s15, [r0]
 8002f50:	e742      	b.n	8002dd8 <__ieee754_rem_pio2f+0x1c>
 8002f52:	15e2      	asrs	r2, r4, #23
 8002f54:	3a86      	subs	r2, #134	; 0x86
 8002f56:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002f62:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800300c <__ieee754_rem_pio2f+0x250>
 8002f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f6e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f82:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002f86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	edcd 7a05 	vstr	s15, [sp, #20]
 8002f96:	d11e      	bne.n	8002fd6 <__ieee754_rem_pio2f+0x21a>
 8002f98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	bf14      	ite	ne
 8002fa2:	2302      	movne	r3, #2
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	491a      	ldr	r1, [pc, #104]	; (8003010 <__ieee754_rem_pio2f+0x254>)
 8002fa8:	9101      	str	r1, [sp, #4]
 8002faa:	2102      	movs	r1, #2
 8002fac:	9100      	str	r1, [sp, #0]
 8002fae:	a803      	add	r0, sp, #12
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	f000 f88d 	bl	80030d0 <__kernel_rem_pio2f>
 8002fb6:	2e00      	cmp	r6, #0
 8002fb8:	f6bf af31 	bge.w	8002e1e <__ieee754_rem_pio2f+0x62>
 8002fbc:	edd5 7a00 	vldr	s15, [r5]
 8002fc0:	eef1 7a67 	vneg.f32	s15, s15
 8002fc4:	edc5 7a00 	vstr	s15, [r5]
 8002fc8:	edd5 7a01 	vldr	s15, [r5, #4]
 8002fcc:	eef1 7a67 	vneg.f32	s15, s15
 8002fd0:	edc5 7a01 	vstr	s15, [r5, #4]
 8002fd4:	e77a      	b.n	8002ecc <__ieee754_rem_pio2f+0x110>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e7e5      	b.n	8002fa6 <__ieee754_rem_pio2f+0x1ea>
 8002fda:	bf00      	nop
 8002fdc:	3f490fd8 	.word	0x3f490fd8
 8002fe0:	4016cbe3 	.word	0x4016cbe3
 8002fe4:	3fc90f80 	.word	0x3fc90f80
 8002fe8:	3fc90fd0 	.word	0x3fc90fd0
 8002fec:	37354400 	.word	0x37354400
 8002ff0:	37354443 	.word	0x37354443
 8002ff4:	2e85a308 	.word	0x2e85a308
 8002ff8:	43490f80 	.word	0x43490f80
 8002ffc:	3f22f984 	.word	0x3f22f984
 8003000:	080038c4 	.word	0x080038c4
 8003004:	2e85a300 	.word	0x2e85a300
 8003008:	248d3132 	.word	0x248d3132
 800300c:	43800000 	.word	0x43800000
 8003010:	08003944 	.word	0x08003944

08003014 <__kernel_cosf>:
 8003014:	ee10 3a10 	vmov	r3, s0
 8003018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003024:	da05      	bge.n	8003032 <__kernel_cosf+0x1e>
 8003026:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800302a:	ee17 2a90 	vmov	r2, s15
 800302e:	2a00      	cmp	r2, #0
 8003030:	d03b      	beq.n	80030aa <__kernel_cosf+0x96>
 8003032:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003036:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80030b0 <__kernel_cosf+0x9c>
 800303a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80030b4 <__kernel_cosf+0xa0>
 800303e:	eddf 5a1e 	vldr	s11, [pc, #120]	; 80030b8 <__kernel_cosf+0xa4>
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <__kernel_cosf+0xa8>)
 8003044:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003048:	4293      	cmp	r3, r2
 800304a:	ee60 0a20 	vmul.f32	s1, s0, s1
 800304e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003052:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80030c0 <__kernel_cosf+0xac>
 8003056:	eea7 6a25 	vfma.f32	s12, s14, s11
 800305a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80030c4 <__kernel_cosf+0xb0>
 800305e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8003062:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80030c8 <__kernel_cosf+0xb4>
 8003066:	eea7 6a25 	vfma.f32	s12, s14, s11
 800306a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800306e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003072:	dc06      	bgt.n	8003082 <__kernel_cosf+0x6e>
 8003074:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8003078:	eed7 0a25 	vfnms.f32	s1, s14, s11
 800307c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8003080:	4770      	bx	lr
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <__kernel_cosf+0xb8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bfda      	itte	le
 8003088:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800308c:	ee07 3a90 	vmovle	s15, r3
 8003090:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8003094:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003098:	eed7 0a06 	vfnms.f32	s1, s14, s12
 800309c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80030a0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80030a4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80030a8:	4770      	bx	lr
 80030aa:	eeb0 0a66 	vmov.f32	s0, s13
 80030ae:	4770      	bx	lr
 80030b0:	310f74f6 	.word	0x310f74f6
 80030b4:	ad47d74e 	.word	0xad47d74e
 80030b8:	b493f27c 	.word	0xb493f27c
 80030bc:	3e999999 	.word	0x3e999999
 80030c0:	37d00d01 	.word	0x37d00d01
 80030c4:	bab60b61 	.word	0xbab60b61
 80030c8:	3d2aaaab 	.word	0x3d2aaaab
 80030cc:	3f480000 	.word	0x3f480000

080030d0 <__kernel_rem_pio2f>:
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	ed2d 8b04 	vpush	{d8-d9}
 80030d8:	b0d7      	sub	sp, #348	; 0x15c
 80030da:	468b      	mov	fp, r1
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	9964      	ldr	r1, [sp, #400]	; 0x190
 80030e0:	4bcb      	ldr	r3, [pc, #812]	; (8003410 <__kernel_rem_pio2f+0x340>)
 80030e2:	9002      	str	r0, [sp, #8]
 80030e4:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 80030e8:	9b01      	ldr	r3, [sp, #4]
 80030ea:	9e65      	ldr	r6, [sp, #404]	; 0x194
 80030ec:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8003420 <__kernel_rem_pio2f+0x350>
 80030f0:	3b01      	subs	r3, #1
 80030f2:	1ed0      	subs	r0, r2, #3
 80030f4:	2408      	movs	r4, #8
 80030f6:	fb90 f0f4 	sdiv	r0, r0, r4
 80030fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80030fe:	1c45      	adds	r5, r0, #1
 8003100:	1ac7      	subs	r7, r0, r3
 8003102:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8003106:	eb0a 0e03 	add.w	lr, sl, r3
 800310a:	ac1a      	add	r4, sp, #104	; 0x68
 800310c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8003110:	2200      	movs	r2, #0
 8003112:	4572      	cmp	r2, lr
 8003114:	dd0f      	ble.n	8003136 <__kernel_rem_pio2f+0x66>
 8003116:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800311a:	2400      	movs	r4, #0
 800311c:	4554      	cmp	r4, sl
 800311e:	dc26      	bgt.n	800316e <__kernel_rem_pio2f+0x9e>
 8003120:	9a01      	ldr	r2, [sp, #4]
 8003122:	9f02      	ldr	r7, [sp, #8]
 8003124:	eddf 7abe 	vldr	s15, [pc, #760]	; 8003420 <__kernel_rem_pio2f+0x350>
 8003128:	4422      	add	r2, r4
 800312a:	a91a      	add	r1, sp, #104	; 0x68
 800312c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003130:	f04f 0c00 	mov.w	ip, #0
 8003134:	e015      	b.n	8003162 <__kernel_rem_pio2f+0x92>
 8003136:	42d7      	cmn	r7, r2
 8003138:	bf5d      	ittte	pl
 800313a:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 800313e:	ee07 1a90 	vmovpl	s15, r1
 8003142:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003146:	eef0 7a47 	vmovmi.f32	s15, s14
 800314a:	ece4 7a01 	vstmia	r4!, {s15}
 800314e:	3201      	adds	r2, #1
 8003150:	e7df      	b.n	8003112 <__kernel_rem_pio2f+0x42>
 8003152:	ecf7 6a01 	vldmia	r7!, {s13}
 8003156:	ed32 7a01 	vldmdb	r2!, {s14}
 800315a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800315e:	f10c 0c01 	add.w	ip, ip, #1
 8003162:	459c      	cmp	ip, r3
 8003164:	ddf5      	ble.n	8003152 <__kernel_rem_pio2f+0x82>
 8003166:	ecee 7a01 	vstmia	lr!, {s15}
 800316a:	3401      	adds	r4, #1
 800316c:	e7d6      	b.n	800311c <__kernel_rem_pio2f+0x4c>
 800316e:	aa06      	add	r2, sp, #24
 8003170:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003174:	9204      	str	r2, [sp, #16]
 8003176:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8003414 <__kernel_rem_pio2f+0x344>
 800317a:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8003418 <__kernel_rem_pio2f+0x348>
 800317e:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8003182:	9203      	str	r2, [sp, #12]
 8003184:	4657      	mov	r7, sl
 8003186:	aa56      	add	r2, sp, #344	; 0x158
 8003188:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 800318c:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8003190:	f108 38ff 	add.w	r8, r8, #4294967295
 8003194:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8003198:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800319c:	aa56      	add	r2, sp, #344	; 0x158
 800319e:	eb02 0008 	add.w	r0, r2, r8
 80031a2:	384c      	subs	r0, #76	; 0x4c
 80031a4:	2200      	movs	r2, #0
 80031a6:	1abc      	subs	r4, r7, r2
 80031a8:	2c00      	cmp	r4, #0
 80031aa:	dc4a      	bgt.n	8003242 <__kernel_rem_pio2f+0x172>
 80031ac:	4628      	mov	r0, r5
 80031ae:	9305      	str	r3, [sp, #20]
 80031b0:	f000 fa7e 	bl	80036b0 <scalbnf>
 80031b4:	eeb0 8a40 	vmov.f32	s16, s0
 80031b8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80031bc:	ee28 0a00 	vmul.f32	s0, s16, s0
 80031c0:	f000 fa34 	bl	800362c <floorf>
 80031c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80031c8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	9b05      	ldr	r3, [sp, #20]
 80031d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80031d4:	ee17 9a90 	vmov	r9, s15
 80031d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031dc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80031e0:	dd44      	ble.n	800326c <__kernel_rem_pio2f+0x19c>
 80031e2:	1e78      	subs	r0, r7, #1
 80031e4:	aa06      	add	r2, sp, #24
 80031e6:	f1c5 0408 	rsb	r4, r5, #8
 80031ea:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80031ee:	fa46 f204 	asr.w	r2, r6, r4
 80031f2:	4491      	add	r9, r2
 80031f4:	40a2      	lsls	r2, r4
 80031f6:	1ab6      	subs	r6, r6, r2
 80031f8:	aa06      	add	r2, sp, #24
 80031fa:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 80031fe:	f1c5 0207 	rsb	r2, r5, #7
 8003202:	4116      	asrs	r6, r2
 8003204:	2e00      	cmp	r6, #0
 8003206:	dd40      	ble.n	800328a <__kernel_rem_pio2f+0x1ba>
 8003208:	2400      	movs	r4, #0
 800320a:	f109 0901 	add.w	r9, r9, #1
 800320e:	4620      	mov	r0, r4
 8003210:	42a7      	cmp	r7, r4
 8003212:	dc75      	bgt.n	8003300 <__kernel_rem_pio2f+0x230>
 8003214:	2d00      	cmp	r5, #0
 8003216:	dd05      	ble.n	8003224 <__kernel_rem_pio2f+0x154>
 8003218:	2d01      	cmp	r5, #1
 800321a:	f000 8086 	beq.w	800332a <__kernel_rem_pio2f+0x25a>
 800321e:	2d02      	cmp	r5, #2
 8003220:	f000 808d 	beq.w	800333e <__kernel_rem_pio2f+0x26e>
 8003224:	2e02      	cmp	r6, #2
 8003226:	d130      	bne.n	800328a <__kernel_rem_pio2f+0x1ba>
 8003228:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800322c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003230:	b358      	cbz	r0, 800328a <__kernel_rem_pio2f+0x1ba>
 8003232:	4628      	mov	r0, r5
 8003234:	9305      	str	r3, [sp, #20]
 8003236:	f000 fa3b 	bl	80036b0 <scalbnf>
 800323a:	9b05      	ldr	r3, [sp, #20]
 800323c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003240:	e023      	b.n	800328a <__kernel_rem_pio2f+0x1ba>
 8003242:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003246:	ac06      	add	r4, sp, #24
 8003248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800324c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003250:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003254:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003258:	ee10 1a10 	vmov	r1, s0
 800325c:	ed30 0a01 	vldmdb	r0!, {s0}
 8003260:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8003264:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003268:	3201      	adds	r2, #1
 800326a:	e79c      	b.n	80031a6 <__kernel_rem_pio2f+0xd6>
 800326c:	d105      	bne.n	800327a <__kernel_rem_pio2f+0x1aa>
 800326e:	1e7a      	subs	r2, r7, #1
 8003270:	a906      	add	r1, sp, #24
 8003272:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8003276:	1236      	asrs	r6, r6, #8
 8003278:	e7c4      	b.n	8003204 <__kernel_rem_pio2f+0x134>
 800327a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800327e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	da39      	bge.n	80032fc <__kernel_rem_pio2f+0x22c>
 8003288:	2600      	movs	r6, #0
 800328a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	f040 808d 	bne.w	80033b0 <__kernel_rem_pio2f+0x2e0>
 8003296:	1e7c      	subs	r4, r7, #1
 8003298:	4620      	mov	r0, r4
 800329a:	2200      	movs	r2, #0
 800329c:	4550      	cmp	r0, sl
 800329e:	da55      	bge.n	800334c <__kernel_rem_pio2f+0x27c>
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d164      	bne.n	800336e <__kernel_rem_pio2f+0x29e>
 80032a4:	2401      	movs	r4, #1
 80032a6:	f06f 0003 	mvn.w	r0, #3
 80032aa:	fb00 f204 	mul.w	r2, r0, r4
 80032ae:	9904      	ldr	r1, [sp, #16]
 80032b0:	588a      	ldr	r2, [r1, r2]
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d050      	beq.n	8003358 <__kernel_rem_pio2f+0x288>
 80032b6:	aa56      	add	r2, sp, #344	; 0x158
 80032b8:	4490      	add	r8, r2
 80032ba:	9a01      	ldr	r2, [sp, #4]
 80032bc:	a91a      	add	r1, sp, #104	; 0x68
 80032be:	443a      	add	r2, r7
 80032c0:	1c78      	adds	r0, r7, #1
 80032c2:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 80032c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80032ca:	4427      	add	r7, r4
 80032cc:	42b8      	cmp	r0, r7
 80032ce:	f73f af5a 	bgt.w	8003186 <__kernel_rem_pio2f+0xb6>
 80032d2:	9903      	ldr	r1, [sp, #12]
 80032d4:	9e02      	ldr	r6, [sp, #8]
 80032d6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80032da:	9105      	str	r1, [sp, #20]
 80032dc:	ee07 1a90 	vmov	s15, r1
 80032e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e4:	2400      	movs	r4, #0
 80032e6:	ece2 7a01 	vstmia	r2!, {s15}
 80032ea:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003420 <__kernel_rem_pio2f+0x350>
 80032ee:	4696      	mov	lr, r2
 80032f0:	429c      	cmp	r4, r3
 80032f2:	dd33      	ble.n	800335c <__kernel_rem_pio2f+0x28c>
 80032f4:	ece8 7a01 	vstmia	r8!, {s15}
 80032f8:	3001      	adds	r0, #1
 80032fa:	e7e7      	b.n	80032cc <__kernel_rem_pio2f+0x1fc>
 80032fc:	2602      	movs	r6, #2
 80032fe:	e783      	b.n	8003208 <__kernel_rem_pio2f+0x138>
 8003300:	aa06      	add	r2, sp, #24
 8003302:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003306:	b948      	cbnz	r0, 800331c <__kernel_rem_pio2f+0x24c>
 8003308:	b12a      	cbz	r2, 8003316 <__kernel_rem_pio2f+0x246>
 800330a:	a906      	add	r1, sp, #24
 800330c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003310:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003314:	2201      	movs	r2, #1
 8003316:	3401      	adds	r4, #1
 8003318:	4610      	mov	r0, r2
 800331a:	e779      	b.n	8003210 <__kernel_rem_pio2f+0x140>
 800331c:	a906      	add	r1, sp, #24
 800331e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003322:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003326:	4602      	mov	r2, r0
 8003328:	e7f5      	b.n	8003316 <__kernel_rem_pio2f+0x246>
 800332a:	1e7c      	subs	r4, r7, #1
 800332c:	aa06      	add	r2, sp, #24
 800332e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003332:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003336:	a906      	add	r1, sp, #24
 8003338:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800333c:	e772      	b.n	8003224 <__kernel_rem_pio2f+0x154>
 800333e:	1e7c      	subs	r4, r7, #1
 8003340:	aa06      	add	r2, sp, #24
 8003342:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003346:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800334a:	e7f4      	b.n	8003336 <__kernel_rem_pio2f+0x266>
 800334c:	a906      	add	r1, sp, #24
 800334e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003352:	3801      	subs	r0, #1
 8003354:	430a      	orrs	r2, r1
 8003356:	e7a1      	b.n	800329c <__kernel_rem_pio2f+0x1cc>
 8003358:	3401      	adds	r4, #1
 800335a:	e7a6      	b.n	80032aa <__kernel_rem_pio2f+0x1da>
 800335c:	ecf6 6a01 	vldmia	r6!, {s13}
 8003360:	ed3e 7a01 	vldmdb	lr!, {s14}
 8003364:	3401      	adds	r4, #1
 8003366:	eee6 7a87 	vfma.f32	s15, s13, s14
 800336a:	e7c1      	b.n	80032f0 <__kernel_rem_pio2f+0x220>
 800336c:	3c01      	subs	r4, #1
 800336e:	ab06      	add	r3, sp, #24
 8003370:	3d08      	subs	r5, #8
 8003372:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f8      	beq.n	800336c <__kernel_rem_pio2f+0x29c>
 800337a:	4628      	mov	r0, r5
 800337c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003380:	f000 f996 	bl	80036b0 <scalbnf>
 8003384:	00a3      	lsls	r3, r4, #2
 8003386:	aa42      	add	r2, sp, #264	; 0x108
 8003388:	3304      	adds	r3, #4
 800338a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003414 <__kernel_rem_pio2f+0x344>
 800338e:	18d0      	adds	r0, r2, r3
 8003390:	4622      	mov	r2, r4
 8003392:	2a00      	cmp	r2, #0
 8003394:	da46      	bge.n	8003424 <__kernel_rem_pio2f+0x354>
 8003396:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 800339a:	2200      	movs	r2, #0
 800339c:	1aa5      	subs	r5, r4, r2
 800339e:	d460      	bmi.n	8003462 <__kernel_rem_pio2f+0x392>
 80033a0:	a942      	add	r1, sp, #264	; 0x108
 80033a2:	4f1e      	ldr	r7, [pc, #120]	; (800341c <__kernel_rem_pio2f+0x34c>)
 80033a4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003420 <__kernel_rem_pio2f+0x350>
 80033a8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80033ac:	2000      	movs	r0, #0
 80033ae:	e050      	b.n	8003452 <__kernel_rem_pio2f+0x382>
 80033b0:	4268      	negs	r0, r5
 80033b2:	eeb0 0a48 	vmov.f32	s0, s16
 80033b6:	f000 f97b 	bl	80036b0 <scalbnf>
 80033ba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003418 <__kernel_rem_pio2f+0x348>
 80033be:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	db19      	blt.n	80033fc <__kernel_rem_pio2f+0x32c>
 80033c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003414 <__kernel_rem_pio2f+0x344>
 80033cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80033d0:	aa06      	add	r2, sp, #24
 80033d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d6:	1c7c      	adds	r4, r7, #1
 80033d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033dc:	3508      	adds	r5, #8
 80033de:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80033e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80033ea:	ee10 3a10 	vmov	r3, s0
 80033ee:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80033f2:	ee17 3a90 	vmov	r3, s15
 80033f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80033fa:	e7be      	b.n	800337a <__kernel_rem_pio2f+0x2aa>
 80033fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003400:	aa06      	add	r2, sp, #24
 8003402:	ee10 3a10 	vmov	r3, s0
 8003406:	463c      	mov	r4, r7
 8003408:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800340c:	e7b5      	b.n	800337a <__kernel_rem_pio2f+0x2aa>
 800340e:	bf00      	nop
 8003410:	08003c88 	.word	0x08003c88
 8003414:	3b800000 	.word	0x3b800000
 8003418:	43800000 	.word	0x43800000
 800341c:	08003c5c 	.word	0x08003c5c
 8003420:	00000000 	.word	0x00000000
 8003424:	a906      	add	r1, sp, #24
 8003426:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800342a:	9101      	str	r1, [sp, #4]
 800342c:	ee07 1a90 	vmov	s15, r1
 8003430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003434:	3a01      	subs	r2, #1
 8003436:	ee67 7a80 	vmul.f32	s15, s15, s0
 800343a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800343e:	ed60 7a01 	vstmdb	r0!, {s15}
 8003442:	e7a6      	b.n	8003392 <__kernel_rem_pio2f+0x2c2>
 8003444:	ecf7 6a01 	vldmia	r7!, {s13}
 8003448:	ecb5 7a01 	vldmia	r5!, {s14}
 800344c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003450:	3001      	adds	r0, #1
 8003452:	4550      	cmp	r0, sl
 8003454:	dc01      	bgt.n	800345a <__kernel_rem_pio2f+0x38a>
 8003456:	4290      	cmp	r0, r2
 8003458:	ddf4      	ble.n	8003444 <__kernel_rem_pio2f+0x374>
 800345a:	ecee 7a01 	vstmia	lr!, {s15}
 800345e:	3201      	adds	r2, #1
 8003460:	e79c      	b.n	800339c <__kernel_rem_pio2f+0x2cc>
 8003462:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003464:	2a03      	cmp	r2, #3
 8003466:	d843      	bhi.n	80034f0 <__kernel_rem_pio2f+0x420>
 8003468:	e8df f002 	tbb	[pc, r2]
 800346c:	021d1d37 	.word	0x021d1d37
 8003470:	aa2e      	add	r2, sp, #184	; 0xb8
 8003472:	4413      	add	r3, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4620      	mov	r0, r4
 8003478:	2800      	cmp	r0, #0
 800347a:	dc55      	bgt.n	8003528 <__kernel_rem_pio2f+0x458>
 800347c:	461a      	mov	r2, r3
 800347e:	4620      	mov	r0, r4
 8003480:	2801      	cmp	r0, #1
 8003482:	dc61      	bgt.n	8003548 <__kernel_rem_pio2f+0x478>
 8003484:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8003420 <__kernel_rem_pio2f+0x350>
 8003488:	2c01      	cmp	r4, #1
 800348a:	dc6d      	bgt.n	8003568 <__kernel_rem_pio2f+0x498>
 800348c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003490:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003494:	2e00      	cmp	r6, #0
 8003496:	d16d      	bne.n	8003574 <__kernel_rem_pio2f+0x4a4>
 8003498:	edcb 6a00 	vstr	s13, [fp]
 800349c:	ed8b 7a01 	vstr	s14, [fp, #4]
 80034a0:	edcb 7a02 	vstr	s15, [fp, #8]
 80034a4:	e024      	b.n	80034f0 <__kernel_rem_pio2f+0x420>
 80034a6:	aa2e      	add	r2, sp, #184	; 0xb8
 80034a8:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8003420 <__kernel_rem_pio2f+0x350>
 80034ac:	4413      	add	r3, r2
 80034ae:	4622      	mov	r2, r4
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	da2a      	bge.n	800350a <__kernel_rem_pio2f+0x43a>
 80034b4:	b37e      	cbz	r6, 8003516 <__kernel_rem_pio2f+0x446>
 80034b6:	eef1 7a47 	vneg.f32	s15, s14
 80034ba:	edcb 7a00 	vstr	s15, [fp]
 80034be:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80034c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034c6:	aa2f      	add	r2, sp, #188	; 0xbc
 80034c8:	2301      	movs	r3, #1
 80034ca:	429c      	cmp	r4, r3
 80034cc:	da26      	bge.n	800351c <__kernel_rem_pio2f+0x44c>
 80034ce:	b10e      	cbz	r6, 80034d4 <__kernel_rem_pio2f+0x404>
 80034d0:	eef1 7a67 	vneg.f32	s15, s15
 80034d4:	edcb 7a01 	vstr	s15, [fp, #4]
 80034d8:	e00a      	b.n	80034f0 <__kernel_rem_pio2f+0x420>
 80034da:	aa2e      	add	r2, sp, #184	; 0xb8
 80034dc:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8003420 <__kernel_rem_pio2f+0x350>
 80034e0:	4413      	add	r3, r2
 80034e2:	2c00      	cmp	r4, #0
 80034e4:	da0b      	bge.n	80034fe <__kernel_rem_pio2f+0x42e>
 80034e6:	b10e      	cbz	r6, 80034ec <__kernel_rem_pio2f+0x41c>
 80034e8:	eef1 7a67 	vneg.f32	s15, s15
 80034ec:	edcb 7a00 	vstr	s15, [fp]
 80034f0:	f009 0007 	and.w	r0, r9, #7
 80034f4:	b057      	add	sp, #348	; 0x15c
 80034f6:	ecbd 8b04 	vpop	{d8-d9}
 80034fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fe:	ed33 7a01 	vldmdb	r3!, {s14}
 8003502:	3c01      	subs	r4, #1
 8003504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003508:	e7eb      	b.n	80034e2 <__kernel_rem_pio2f+0x412>
 800350a:	ed73 7a01 	vldmdb	r3!, {s15}
 800350e:	3a01      	subs	r2, #1
 8003510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003514:	e7cc      	b.n	80034b0 <__kernel_rem_pio2f+0x3e0>
 8003516:	eef0 7a47 	vmov.f32	s15, s14
 800351a:	e7ce      	b.n	80034ba <__kernel_rem_pio2f+0x3ea>
 800351c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003520:	3301      	adds	r3, #1
 8003522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003526:	e7d0      	b.n	80034ca <__kernel_rem_pio2f+0x3fa>
 8003528:	ed52 6a01 	vldr	s13, [r2, #-4]
 800352c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003530:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003534:	3801      	subs	r0, #1
 8003536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ed62 7a01 	vstmdb	r2!, {s15}
 8003542:	ed02 7a01 	vstr	s14, [r2, #-4]
 8003546:	e797      	b.n	8003478 <__kernel_rem_pio2f+0x3a8>
 8003548:	ed52 6a01 	vldr	s13, [r2, #-4]
 800354c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003550:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003554:	3801      	subs	r0, #1
 8003556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ed62 7a01 	vstmdb	r2!, {s15}
 8003562:	ed02 7a01 	vstr	s14, [r2, #-4]
 8003566:	e78b      	b.n	8003480 <__kernel_rem_pio2f+0x3b0>
 8003568:	ed33 7a01 	vldmdb	r3!, {s14}
 800356c:	3c01      	subs	r4, #1
 800356e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003572:	e789      	b.n	8003488 <__kernel_rem_pio2f+0x3b8>
 8003574:	eef1 6a66 	vneg.f32	s13, s13
 8003578:	eeb1 7a47 	vneg.f32	s14, s14
 800357c:	edcb 6a00 	vstr	s13, [fp]
 8003580:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003584:	eef1 7a67 	vneg.f32	s15, s15
 8003588:	e78a      	b.n	80034a0 <__kernel_rem_pio2f+0x3d0>
 800358a:	bf00      	nop

0800358c <__kernel_sinf>:
 800358c:	ee10 3a10 	vmov	r3, s0
 8003590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003594:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003598:	da04      	bge.n	80035a4 <__kernel_sinf+0x18>
 800359a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800359e:	ee17 3a90 	vmov	r3, s15
 80035a2:	b35b      	cbz	r3, 80035fc <__kernel_sinf+0x70>
 80035a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80035a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003600 <__kernel_sinf+0x74>
 80035ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003604 <__kernel_sinf+0x78>
 80035b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80035b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003608 <__kernel_sinf+0x7c>
 80035b8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80035bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800360c <__kernel_sinf+0x80>
 80035c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80035c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003610 <__kernel_sinf+0x84>
 80035c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80035cc:	eee7 7a06 	vfma.f32	s15, s14, s12
 80035d0:	b930      	cbnz	r0, 80035e0 <__kernel_sinf+0x54>
 80035d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003614 <__kernel_sinf+0x88>
 80035d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80035da:	eea6 0a86 	vfma.f32	s0, s13, s12
 80035de:	4770      	bx	lr
 80035e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80035e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80035e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80035ec:	eed7 0a27 	vfnms.f32	s1, s14, s15
 80035f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003618 <__kernel_sinf+0x8c>
 80035f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80035f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	2f2ec9d3 	.word	0x2f2ec9d3
 8003604:	b2d72f34 	.word	0xb2d72f34
 8003608:	3638ef1b 	.word	0x3638ef1b
 800360c:	b9500d01 	.word	0xb9500d01
 8003610:	3c088889 	.word	0x3c088889
 8003614:	be2aaaab 	.word	0xbe2aaaab
 8003618:	3e2aaaab 	.word	0x3e2aaaab

0800361c <fabsf>:
 800361c:	ee10 3a10 	vmov	r3, s0
 8003620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003624:	ee00 3a10 	vmov	s0, r3
 8003628:	4770      	bx	lr
	...

0800362c <floorf>:
 800362c:	ee10 3a10 	vmov	r3, s0
 8003630:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003634:	0dca      	lsrs	r2, r1, #23
 8003636:	3a7f      	subs	r2, #127	; 0x7f
 8003638:	2a16      	cmp	r2, #22
 800363a:	dc2a      	bgt.n	8003692 <floorf+0x66>
 800363c:	2a00      	cmp	r2, #0
 800363e:	da11      	bge.n	8003664 <floorf+0x38>
 8003640:	eddf 7a18 	vldr	s15, [pc, #96]	; 80036a4 <floorf+0x78>
 8003644:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003648:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	dd05      	ble.n	800365e <floorf+0x32>
 8003652:	2b00      	cmp	r3, #0
 8003654:	da23      	bge.n	800369e <floorf+0x72>
 8003656:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <floorf+0x7c>)
 8003658:	2900      	cmp	r1, #0
 800365a:	bf18      	it	ne
 800365c:	4613      	movne	r3, r2
 800365e:	ee00 3a10 	vmov	s0, r3
 8003662:	4770      	bx	lr
 8003664:	4911      	ldr	r1, [pc, #68]	; (80036ac <floorf+0x80>)
 8003666:	4111      	asrs	r1, r2
 8003668:	420b      	tst	r3, r1
 800366a:	d0fa      	beq.n	8003662 <floorf+0x36>
 800366c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80036a4 <floorf+0x78>
 8003670:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003674:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	ddef      	ble.n	800365e <floorf+0x32>
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfbe      	ittt	lt
 8003682:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003686:	fa40 f202 	asrlt.w	r2, r0, r2
 800368a:	189b      	addlt	r3, r3, r2
 800368c:	ea23 0301 	bic.w	r3, r3, r1
 8003690:	e7e5      	b.n	800365e <floorf+0x32>
 8003692:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003696:	d3e4      	bcc.n	8003662 <floorf+0x36>
 8003698:	ee30 0a00 	vadd.f32	s0, s0, s0
 800369c:	4770      	bx	lr
 800369e:	2300      	movs	r3, #0
 80036a0:	e7dd      	b.n	800365e <floorf+0x32>
 80036a2:	bf00      	nop
 80036a4:	7149f2ca 	.word	0x7149f2ca
 80036a8:	bf800000 	.word	0xbf800000
 80036ac:	007fffff 	.word	0x007fffff

080036b0 <scalbnf>:
 80036b0:	b508      	push	{r3, lr}
 80036b2:	ee10 2a10 	vmov	r2, s0
 80036b6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80036ba:	ed2d 8b02 	vpush	{d8}
 80036be:	eef0 0a40 	vmov.f32	s1, s0
 80036c2:	d004      	beq.n	80036ce <scalbnf+0x1e>
 80036c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80036c8:	d306      	bcc.n	80036d8 <scalbnf+0x28>
 80036ca:	ee70 0a00 	vadd.f32	s1, s0, s0
 80036ce:	ecbd 8b02 	vpop	{d8}
 80036d2:	eeb0 0a60 	vmov.f32	s0, s1
 80036d6:	bd08      	pop	{r3, pc}
 80036d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036dc:	d21c      	bcs.n	8003718 <scalbnf+0x68>
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <scalbnf+0xac>)
 80036e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003760 <scalbnf+0xb0>
 80036e4:	4298      	cmp	r0, r3
 80036e6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80036ea:	db10      	blt.n	800370e <scalbnf+0x5e>
 80036ec:	ee10 2a90 	vmov	r2, s1
 80036f0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80036f4:	3b19      	subs	r3, #25
 80036f6:	4403      	add	r3, r0
 80036f8:	2bfe      	cmp	r3, #254	; 0xfe
 80036fa:	dd0f      	ble.n	800371c <scalbnf+0x6c>
 80036fc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003764 <scalbnf+0xb4>
 8003700:	eeb0 0a48 	vmov.f32	s0, s16
 8003704:	f000 f834 	bl	8003770 <copysignf>
 8003708:	ee60 0a08 	vmul.f32	s1, s0, s16
 800370c:	e7df      	b.n	80036ce <scalbnf+0x1e>
 800370e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003768 <scalbnf+0xb8>
 8003712:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003716:	e7da      	b.n	80036ce <scalbnf+0x1e>
 8003718:	0ddb      	lsrs	r3, r3, #23
 800371a:	e7ec      	b.n	80036f6 <scalbnf+0x46>
 800371c:	2b00      	cmp	r3, #0
 800371e:	dd06      	ble.n	800372e <scalbnf+0x7e>
 8003720:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003724:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003728:	ee00 3a90 	vmov	s1, r3
 800372c:	e7cf      	b.n	80036ce <scalbnf+0x1e>
 800372e:	f113 0f16 	cmn.w	r3, #22
 8003732:	da06      	bge.n	8003742 <scalbnf+0x92>
 8003734:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003738:	4298      	cmp	r0, r3
 800373a:	dcdf      	bgt.n	80036fc <scalbnf+0x4c>
 800373c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003768 <scalbnf+0xb8>
 8003740:	e7de      	b.n	8003700 <scalbnf+0x50>
 8003742:	3319      	adds	r3, #25
 8003744:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003748:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800374c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800376c <scalbnf+0xbc>
 8003750:	ee07 3a10 	vmov	s14, r3
 8003754:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003758:	e7b9      	b.n	80036ce <scalbnf+0x1e>
 800375a:	bf00      	nop
 800375c:	ffff3cb0 	.word	0xffff3cb0
 8003760:	4c000000 	.word	0x4c000000
 8003764:	7149f2ca 	.word	0x7149f2ca
 8003768:	0da24260 	.word	0x0da24260
 800376c:	33000000 	.word	0x33000000

08003770 <copysignf>:
 8003770:	ee10 3a10 	vmov	r3, s0
 8003774:	ee10 2a90 	vmov	r2, s1
 8003778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800377c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003780:	4313      	orrs	r3, r2
 8003782:	ee00 3a10 	vmov	s0, r3
 8003786:	4770      	bx	lr

08003788 <_init>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr

08003794 <_fini>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr
